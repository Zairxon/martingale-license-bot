#!/usr/bin/env python3
import os
import sqlite3
import logging
import aiohttp
import asyncio
import hashlib
import time
from datetime import datetime, timedelta
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
    from telegram.constants import ParseMode
except ImportError:
    logger.error("Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
    exit(1)

# ============================================================================
# üîß –¢–û–õ–¨–ö–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î - –û–°–¢–ê–õ–¨–ù–û–ï –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
# ============================================================================

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
BOT_TOKEN = "7883129351:AAGGUIgmfEzRIg5_vNx2NhgCNXa6gSLkwwU"

# –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–û–ë–ï–ò –ö–ê–†–¢–´!)
PAYMENT_CARDS = {
    "uzcard": {
        "number": "8600 0691 4864 4864",
        "owner": "Asqarov Rasulbek",
        "bank": "Kapitalbank",
        "name": "üí≥ UzCard Kapitalbank"
    },
    "visa": {
        "number": "4278 3100 2430 7167",
        "owner": "Asqarov Rasulbek", 
        "bank": "Kapitalbank",
        "name": "üí≥ VISA Kapital"
    }
}

# –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô!)
# 3 –¥–Ω—è —Ç—Ä–∏–∞–ª + 100 USD –∑–∞ –º–µ—Å—è—Ü
TRIAL_DAYS = 3
MONTHLY_PRICE = 100  # USD

# ============================================================================
# üîß –¢–û–õ–¨–ö–û –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–ò –ë–î - –û–°–¢–ê–õ–¨–ù–û–ï –ù–ï –¢–†–û–ì–ê–ï–ú
# ============================================================================

def init_database():
    """–¢–û–õ–¨–ö–û –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å API - –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è"""
    try:
        conn = sqlite3.connect('license_system.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS licenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                license_key TEXT UNIQUE NOT NULL,
                account_number TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                expires_at DATETIME NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                plan_type TEXT NOT NULL,
                telegram_user_id TEXT,
                payment_verified BOOLEAN DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id TEXT UNIQUE NOT NULL,
                username TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                total_licenses INTEGER DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id TEXT NOT NULL,
                license_key TEXT NOT NULL,
                amount REAL NOT NULL,
                plan_type TEXT NOT NULL,
                payment_method TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                verified BOOLEAN DEFAULT 0
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–¥–ª—è API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def save_license_to_db(license_key, plan_type, telegram_user_id, days, amount=0):
    """–¢–û–õ–¨–ö–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        conn = sqlite3.connect('license_system.db')
        cursor = conn.cursor()
        
        expires_at = datetime.now() + timedelta(days=days)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (—Ç—Ä–∏–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)
        payment_verified = 1 if plan_type == "trial" else 0
        
        cursor.execute('''
            INSERT INTO licenses (license_key, plan_type, telegram_user_id, expires_at, is_active, payment_verified)
            VALUES (?, ?, ?, ?, 1, ?)
        ''', (license_key, plan_type, str(telegram_user_id), expires_at, payment_verified))
        
        cursor.execute('''
            INSERT OR IGNORE INTO users (telegram_user_id, username, total_licenses)
            VALUES (?, ?, 0)
        ''', (str(telegram_user_id), ""))
        
        cursor.execute('''
            UPDATE users SET total_licenses = total_licenses + 1 
            WHERE telegram_user_id = ?
        ''', (str(telegram_user_id),))
        
        if amount > 0:
            cursor.execute('''
                INSERT INTO payments (telegram_user_id, license_key, amount, plan_type, verified)
                VALUES (?, ?, ?, ?, ?)
            ''', (str(telegram_user_id), license_key, amount, plan_type, payment_verified))
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {license_key}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        return False

def verify_payment_in_db(license_key):
    """–¢–û–õ–¨–ö–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ –ë–î"""
    try:
        conn = sqlite3.connect('license_system.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE licenses SET payment_verified = 1 WHERE license_key = ?
        ''', (license_key,))
        
        cursor.execute('''
            UPDATE payments SET verified = 1 WHERE license_key = ?
        ''', (license_key,))
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –ë–î: {license_key}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {e}")
        return False

def get_user_licenses_from_db(telegram_user_id):
    """–¢–û–õ–¨–ö–û –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        conn = sqlite3.connect('license_system.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT license_key, plan_type, created_at, expires_at, is_active, payment_verified
            FROM licenses 
            WHERE telegram_user_id = ?
            ORDER BY created_at DESC
        ''', (str(telegram_user_id),))
        
        licenses = cursor.fetchall()
        conn.close()
        
        return licenses
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
        return []

# ============================================================================
# –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô!)
# ============================================================================

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï!)
users_data = {}

def generate_license_key():
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"""
    timestamp = str(int(time.time()))[-6:]
    random_part = hashlib.md5(os.urandom(32)).hexdigest()[:12].upper()
    
    key_parts = [
        "RFX",
        random_part[:4],
        random_part[4:8], 
        random_part[8:12],
        timestamp[:3],
        timestamp[3:5]
    ]
    
    return "-".join(key_parts)

def has_trial_license(user_id):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–∞–ª–∞"""
    if user_id in users_data:
        for license_data in users_data[user_id].get('licenses', []):
            if license_data.get('type') == 'trial':
                return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in users_data:
        users_data[user_id] = {
            'username': user.username or user.first_name,
            'licenses': [],
            'payments': []
        }
    
    keyboard = [
        [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–∞–ª (3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="trial")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é ($100/–º–µ—Å—è—Ü)", callback_data="buy_license")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏", callback_data="my_licenses")],
        [InlineKeyboardButton("üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="verify_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RFX Trading License Bot!</b>\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"üîê <b>–°–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ MT5</b>\n\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:</b>\n"
        f"‚Ä¢ üÜì <b>–¢—Ä–∏–∞–ª –ø–µ—Ä–∏–æ–¥:</b> 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        f"‚Ä¢ üí≥ <b>–ú–µ—Å—è—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è:</b> $100 USD\n"
        f"‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π\n"
        f"‚Ä¢ üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "trial":
        await handle_trial_request(query)
    elif query.data == "buy_license":
        await handle_license_purchase(query)
    elif query.data == "my_licenses":
        await show_user_licenses(query)
    elif query.data == "verify_payment":
        await start_payment_verification(query)
    elif query.data == "back_to_main":
        await start_from_callback(query)
    elif query.data.startswith("pay_card_"):
        # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
        parts = query.data.split("_")
        card_id = parts[2]
        license_key = parts[3] if len(parts) > 3 else ""
        await show_payment_details(query, card_id, license_key)

async def handle_trial_request(query):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –≤—ã–¥–∞—á–∞ —Ç—Ä–∏–∞–ª–∞"""
    user_id = query.from_user.id
    
    if has_trial_license(user_id):
        await query.edit_message_text(
            "‚ùå <b>–¢—Ä–∏–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n\n"
            "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Ç—Ä–∏–∞–ª –ø–µ—Ä–∏–æ–¥.\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –∑–∞ $100.",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏–∞–ª –∫–ª—é—á
    license_key = generate_license_key()
    
    # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    trial_data = {
        'key': license_key,
        'type': 'trial',
        'created': datetime.now(),
        'expires': datetime.now() + timedelta(days=TRIAL_DAYS),
        'active': True
    }
    
    users_data[user_id]['licenses'].append(trial_data)
    
    # –ù–û–í–û–ï: —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è API
    save_license_to_db(license_key, "trial", user_id, TRIAL_DAYS, 0)
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üéâ <b>–¢—Ä–∏–∞–ª –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        f"üîê <b>–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:</b>\n"
        f"<code>{license_key}</code>\n\n"
        f"‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 3 –¥–Ω—è\n"
        f"üìÖ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {trial_data['expires'].strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ)\n"
        f"2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ MT5\n"
        f"3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞\n\n"
        f"üí° <b>–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞:</b>\n"
        f"–ö—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –∑–∞ $100 –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

async def handle_license_purchase(query):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ø–æ–∫—É–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ä—Ç—ã"""
    user_id = query.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    license_key = generate_license_key()
    
    # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
    purchase_data = {
        'key': license_key,
        'type': 'monthly',
        'created': datetime.now(),
        'expires': datetime.now() + timedelta(days=30),
        'active': False,  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        'paid': False
    }
    
    users_data[user_id]['licenses'].append(purchase_data)
    
    # –ù–û–í–û–ï: —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è API (–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ)
    save_license_to_db(license_key, "monthly", user_id, 30, MONTHLY_PRICE)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
    keyboard = []
    for card_id, card_info in PAYMENT_CARDS.items():
        keyboard.append([InlineKeyboardButton(
            card_info["name"], 
            callback_data=f"pay_card_{card_id}_{license_key}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üí≥ <b>–ü–æ–∫—É–ø–∫–∞ –º–µ—Å—è—á–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> ${MONTHLY_PRICE} USD\n"
        f"üîê <b>–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:</b>\n<code>{license_key}</code>\n\n"
        f"üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

async def show_payment_details(query, card_id, license_key):
    """–ü–æ–∫–∞–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    if card_id not in PAYMENT_CARDS:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞")
        return
    
    card_info = PAYMENT_CARDS[card_id]
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="verify_payment")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É", callback_data="buy_license")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"üîê <b>–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:</b>\n<code>{license_key}</code>\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> ${MONTHLY_PRICE} USD\n\n"
        f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã:</b>\n"
        f"‚Ä¢ <b>–ö–∞—Ä—Ç–∞:</b> <code>{card_info['number']}</code>\n"
        f"‚Ä¢ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {card_info['owner']}\n"
        f"‚Ä¢ <b>–ë–∞–Ω–∫:</b> {card_info['bank']}\n"
        f"‚Ä¢ <b>–¢–∏–ø:</b> {card_info['name']}\n\n"
        f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É ${MONTHLY_PRICE} USD\n"
        f"2. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
        f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        f"‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á!",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

async def start_payment_verification(query):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–µ–∏—Ö –∫–∞—Ä—Ç–∞—Ö
    cards_info = ""
    for card_id, card_info in PAYMENT_CARDS.items():
        cards_info += f"‚Ä¢ {card_info['name']}: {card_info['number']} ({card_info['owner']})\n"
    
    await query.edit_message_text(
        "üì∏ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ ${MONTHLY_PRICE} USD\n\n"
        f"üí≥ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n{cards_info}\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    if user_id not in users_data:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ /start ‚Üí '–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é'"
        )
        return
    
    # –ò—â–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
    unverified_license = None
    for license_data in users_data[user_id]['licenses']:
        if license_data.get('type') == 'monthly' and not license_data.get('paid', False):
            unverified_license = license_data
            break
    
    if not unverified_license:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑."
        )
        return
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    unverified_license['paid'] = True
    unverified_license['active'] = True
    
    # –ù–û–í–û–ï: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤ –ë–î –¥–ª—è API
    verify_payment_in_db(unverified_license['key'])
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        f"üîê <b>–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b>\n"
        f"<code>{unverified_license['key']}</code>\n\n"
        f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {unverified_license['expires'].strftime('%d.%m.%Y %H:%M')}\n\n"
        f"‚úÖ <b>–õ–∏—Ü–µ–Ω–∑–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

async def show_user_licenses(query):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ø–æ–∫–∞–∑ –ª–∏—Ü–µ–Ω–∑–∏–π"""
    user_id = query.from_user.id
    
    if user_id not in users_data or not users_data[user_id]['licenses']:
        keyboard = [
            [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–∞–ª", callback_data="trial")],
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="buy_license")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìã <b>–í–∞—à–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–π.\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∏–∞–ª –Ω–∞ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é!",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        return
    
    text = "üìã <b>–í–∞—à–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:</b>\n\n"
    
    for license_data in users_data[user_id]['licenses']:
        license_key = license_data['key']
        license_type = license_data['type']
        expires = license_data['expires']
        is_active = license_data.get('active', False)
        is_paid = license_data.get('paid', True)  # –¢—Ä–∏–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        is_expired = expires < datetime.now()
        
        if license_type == 'trial':
            type_name = "üÜì –¢—Ä–∏–∞–ª (3 –¥–Ω—è)"
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if (is_active and not is_expired) else "‚ùå –ò—Å—Ç–µ–∫"
        else:
            type_name = "üí≥ –ú–µ—Å—è—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"
            if not is_paid:
                status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            elif is_expired:
                status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            else:
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        
        text += (
            f"üîê <code>{license_key}</code>\n"
            f"üìã {type_name}\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –µ—â–µ", callback_data="buy_license")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

async def start_from_callback(query):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–∞–ª (3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="trial")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é ($100/–º–µ—Å—è—Ü)", callback_data="buy_license")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏", callback_data="my_licenses")],
        [InlineKeyboardButton("üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="verify_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"ü§ñ <b>RFX Trading License Bot</b>\n\n"
        f"üîê <b>–°–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞</b>\n\n"
        f"‚Ä¢ üÜì <b>–¢—Ä–∏–∞–ª:</b> 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        f"‚Ä¢ üí≥ <b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> $100 USD/–º–µ—Å—è—Ü\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )

# ============================================================================
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô!)
# ============================================================================

def main():
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –¢–û–õ–¨–ö–û –î–û–ë–ê–í–õ–Ø–ï–ú –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –¥–ª—è API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    init_database()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_payment_proof))
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ RFX Trading License Bot...")
    logger.info("üí≥ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: 3 –¥–Ω—è —Ç—Ä–∏–∞–ª + $100/–º–µ—Å—è—Ü")
    logger.info(f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã UzCard: {PAYMENT_CARDS['uzcard']['number']} ({PAYMENT_CARDS['uzcard']['owner']})")
    logger.info(f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã VISA: {PAYMENT_CARDS['visa']['number']} ({PAYMENT_CARDS['visa']['owner']})")
    logger.info("‚úÖ –ë–î —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å API")
    logger.info("üîê –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    application.run_polling()

if __name__ == '__main__':
    main()
