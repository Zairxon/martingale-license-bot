#!/usr/bin/env python3
import os
import logging
import aiohttp
import asyncio
from datetime import datetime, timedelta, timezone
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot")
    print("pip install python-telegram-bot aiohttp")
    exit(1)

# ===============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===============================
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 295698267
API_BASE_URL = "https://web-production-969a6.up.railway.app"  # –í–∞—à Railway URL

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
VISA_CARD = "4278 3100 2430 7167"
HUMO_CARD = "9860 1001 2541 9018"
CARD_OWNER = "Asqarov Rasulbek"

print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
print(f"üë®‚Äçüíº Admin ID: {ADMIN_ID}")
print(f"üåê API URL: {API_BASE_URL}")

# ===============================
# API –§–£–ù–ö–¶–ò–ò
# ===============================
async def api_request(endpoint, method="GET", data=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        url = f"{API_BASE_URL}/{endpoint.lstrip('/')}"
        
        async with aiohttp.ClientSession() as session:
            if method == "GET":
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"API –æ—à–∏–±–∫–∞: {response.status}")
                        return {"error": f"API –æ—à–∏–±–∫–∞: {response.status}"}
            
            elif method == "POST":
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"API –æ—à–∏–±–∫–∞: {response.status}")
                        return {"error": f"API –æ—à–∏–±–∫–∞: {response.status}"}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {"error": f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}"}

async def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ API"""
    result = await api_request("/health")
    return result.get("status") == "healthy"

async def check_license_api(license_key, account_number):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ API"""
    endpoint = f"/check_license/{license_key}/{account_number}"
    return await api_request(endpoint)

# ===============================
# –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
# ===============================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
users_data = {}
payments_data = {}
ea_file_data = None

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_data:
        users_data[user_id] = {
            'license_key': None,
            'license_type': 'none',
            'license_status': 'inactive',
            'trial_used': False,
            'payment_id': None
        }
    return users_data[user_id]

def generate_user_key(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    import hashlib
    secret_data = f"{user_id}_RFX_SECRET_2025_PERMANENT"
    hash_key = hashlib.sha256(secret_data.encode()).hexdigest()[:16].upper()
    key = f"RFX-{hash_key[:4]}-{hash_key[4:8]}-{hash_key[8:12]}-{hash_key[12:16]}"
    return key

def create_trial_license(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é"""
    user_data = get_user_data(user_id)
    
    if user_data['trial_used']:
        return None, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    
    user_data['license_key'] = generate_user_key(user_id)
    user_data['license_type'] = 'trial'
    user_data['license_status'] = 'active'
    user_data['trial_used'] = True
    user_data['expires_at'] = (datetime.now() + timedelta(days=3)).isoformat()
    
    return user_data['license_key'], None

def create_payment_request(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    import time
    payment_id = int(time.time())
    payments_data[payment_id] = {
        'user_id': user_id,
        'amount': 100,
        'status': 'pending',
        'created_at': datetime.now().isoformat()
    }
    return payment_id

def approve_payment(payment_id):
    """–û–¥–æ–±—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
    if payment_id not in payments_data:
        return None
    
    payment = payments_data[payment_id]
    user_id = payment['user_id']
    user_data = get_user_data(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    if not user_data['license_key']:
        user_data['license_key'] = generate_user_key(user_id)
    
    user_data['license_type'] = 'monthly'
    user_data['license_status'] = 'active'
    user_data['expires_at'] = (datetime.now() + timedelta(days=30)).isoformat()
    
    payment['status'] = 'approved'
    
    return user_data['license_key'], user_id, user_data['expires_at']

# ===============================
# –£–¢–ò–õ–ò–¢–´
# ===============================
def is_admin(user_id):
    return int(user_id) == ADMIN_ID

def format_datetime(dt_string):
    try:
        dt = datetime.fromisoformat(dt_string)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def check_license_expired(expires_at):
    if not expires_at:
        return False
    try:
        expires_dt = datetime.fromisoformat(expires_at)
        return datetime.now() > expires_dt
    except:
        return True

# ===============================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ===============================
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üÜì 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û + EA —Ñ–∞–π–ª", callback_data="trial")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –º–µ—Å—è—Ü - 100 USD", callback_data="buy")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ EA", callback_data="info")],
        [InlineKeyboardButton("üîç –¢–µ—Å—Ç API", callback_data="test_api")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===============================
# –¢–ï–ö–°–¢–´
# ===============================
EA_INFO = """ü§ñ –¢–û–†–ì–û–í–´–ô –°–û–í–ï–¢–ù–ò–ö
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞

üìä –°–∏–º–≤–æ–ª—ã: BTCUSD, XAUUSD
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–æ–∫
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
üí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: –æ—Ç 1000 USD

üéØ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è + EA —Ñ–∞–π–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üìà –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –¥–µ–º–æ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Å—á–µ—Ç–µ
üí∞ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 100 USD (–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

üîê –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã:
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–∞ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π —á–µ—Ä–µ–∑ API

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""

WELCOME_TEXT = f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RFX Trading!

üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
üîê –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
üåê API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Railway

üí° –í–∞—Ä–∏–∞–Ω—Ç—ã:
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ + EA —Ñ–∞–π–ª
üí∞ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 100 USD

üéØ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
1. –ë–µ—Ä–µ—Ç–µ –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è
2. –°–∫–∞—á–∏–≤–∞–µ—Ç–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ EA
3. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
4. –ö–ª—é—á –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ===============================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        api_healthy = await check_api_health()
        api_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if api_healthy else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        total_users = len(users_data)
        active_licenses = sum(1 for u in users_data.values() 
                            if u['license_status'] == 'active' and not check_license_expired(u.get('expires_at')))
        trial_licenses = sum(1 for u in users_data.values() if u['license_type'] == 'trial')
        monthly_licenses = sum(1 for u in users_data.values() if u['license_type'] == 'monthly')
        
        ea_status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" if ea_file_data else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
üåê API —Å—Ç–∞—Ç—É—Å: {api_status}
üîó API URL: {API_BASE_URL}

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π: {active_licenses}
üÜì –ü—Ä–æ–±–Ω—ã—Ö: {trial_licenses}
üí∞ –ú–µ—Å—è—á–Ω—ã—Ö: {monthly_licenses}
üíµ –î–æ—Ö–æ–¥: {len([p for p in payments_data.values() if p['status'] == 'approved']) * 100} USD
üìÅ EA —Ñ–∞–π–ª: {ea_status}

üîê –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´:
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ API –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏

üí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ EA —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –±–æ—Ç—É"""
        
        await update.message.reply_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats: {e}")

async def test_license_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π"""
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_license <–∫–ª—é—á> <–Ω–æ–º–µ—Ä_—Å—á–µ—Ç–∞>")
            return
        
        license_key = context.args[0]
        account_number = context.args[1]
        
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ API...")
        
        result = await check_license_api(license_key, account_number)
        
        if result.get("valid"):
            text = f"""‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!
üîë –ö–ª—é—á: {license_key}
üíº –°—á–µ—Ç: {account_number}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"""
        else:
            text = f"""‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!
üîë –ö–ª—é—á: {license_key}
üíº –°—á–µ—Ç: {account_number}
‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"""
        
        await update.message.reply_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ test_license_command: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
# ===============================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "trial":
            key, error = create_trial_license(user_id)
            if error:
                await query.message.reply_text(f"‚ùå {error}", reply_markup=main_keyboard())
            else:
                text = f"""üéâ –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{key}`
‚è∞ –°—Ä–æ–∫: 3 –¥–Ω—è
üìÅ –ú–æ–∂–µ—Ç–µ –°–†–ê–ó–£ —Å–∫–∞—á–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å EA!

üîê –í–ê–ñ–ù–û:
‚Ä¢ –ö–ª—é—á –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á = –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç
‚Ä¢ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ç –∂–µ –∫–ª—é—á –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è

üéØ –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:
1. –°–∫–∞—á–∞–π—Ç–µ EA —Ñ–∞–π–ª
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ MT4/MT5  
3. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EA
4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ 3 –¥–Ω—è
5. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É

üí∞ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ 100 USD"""
                
                keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="download")]]
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "buy":
            payment_id = create_payment_request(user_id)
            context.user_data['payment_id'] = payment_id
            
            user_data = get_user_data(user_id)
            user_key = user_data['license_key'] or generate_user_key(user_id)
            
            text = f"""üí≥ –û–ü–õ–ê–¢–ê –õ–ò–¶–ï–ù–ó–ò–ò

üíµ –°—É–º–º–∞: 100 USD (1 –º–µ—Å—è—Ü)
üîë –í–∞—à –∫–ª—é—á: `{user_key}`

üí≥ –†–ï–ö–í–ò–ó–ò–¢–´:
üè¶ VISA: `{VISA_CARD}`
üè¶ HUMO: `{HUMO_CARD}`
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 100 USD –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞

üîê –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ—Ç –∂–µ –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–µ—Å—è—Ü!
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx"""
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ]
            await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "paid":
            payment_id = context.user_data.get('payment_id')
            if not payment_id:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=main_keyboard())
                return
                
            await query.message.reply_text("""üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ

–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
‚úÖ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ 100 USD
‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
üîê –í–∞—à –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""")
            
            context.user_data['waiting_receipt'] = True
        
        elif data == "status":
            user_data = get_user_data(user_id)
            
            if not user_data['license_key']:
                text = """‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

–í—ã –º–æ–∂–µ—Ç–µ:
üÜì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è + EA —Ñ–∞–π–ª
üí∞ –ö—É–ø–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD"""
                await query.message.reply_text(text, reply_markup=main_keyboard())
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
                is_expired = check_license_expired(user_data.get('expires_at'))
                status = "expired" if is_expired else user_data['license_status']
                
                status_emoji = "‚úÖ" if status == "active" else "‚ùå"
                type_emoji = "üÜì" if user_data['license_type'] == "trial" else "üí∞"
                
                text = f"""{status_emoji} –°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{user_data['license_key']}`
{type_emoji} –¢–∏–ø: {user_data['license_type'].title()}
üìä –°—Ç–∞—Ç—É—Å: {status.title()}"""
                
                if user_data.get('expires_at'):
                    if status == "active":
                        text += f"\n‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime(user_data['expires_at'])}"
                    else:
                        text += f"\n‚ùå –ò—Å—Ç–µ–∫–ª–∞: {format_datetime(user_data['expires_at'])}"
                
                text += f"\n\nüîê –ó–ê–©–ò–¢–ê: –ö–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É"
                text += f"\nüåê API –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Railway"
                
                keyboard = []
                if status == "active":
                    download_text = "üìÅ –°–∫–∞—á–∞—Ç—å EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if user_data['license_type'] == "trial" else "üìÅ –°–∫–∞—á–∞—Ç—å EA"
                    keyboard.append([InlineKeyboardButton(download_text, callback_data="download")])
                if user_data['license_type'] == "trial" or status == "expired":
                    keyboard.append([InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")])
                
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "info":
            await query.message.reply_text(EA_INFO, reply_markup=main_keyboard())
        
        elif data == "back":
            await query.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())
        
        elif data == "test_api":
            await query.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é API...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
            is_healthy = await check_api_health()
            
            if is_healthy:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏—Ü–µ–Ω–∑–∏–∏
                test_result = await check_license_api("RFX-TEST-TEST-TEST", "12345")
                
                text = f"""‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!
üåê URL: {API_BASE_URL}
üíö –°—Ç–∞—Ç—É—Å: –ó–¥–æ—Ä–æ–≤
üîç –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {test_result.get('valid', False)}
üìä –û—Ç–≤–µ—Ç API: {test_result}"""
            else:
                text = f"""‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!
üåê URL: {API_BASE_URL}
üíî –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞
‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway deployment"""
            
            await query.message.reply_text(text, reply_markup=main_keyboard())
        
        elif data == "download":
            user_data = get_user_data(user_id)
            
            if not user_data['license_key']:
                await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏!", reply_markup=main_keyboard())
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
            if check_license_expired(user_data.get('expires_at')):
                if user_data['license_type'] == "trial":
                    await query.message.reply_text("""‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!
üéØ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–æ–≤–µ—Ç–Ω–∏–∫? 
üí∞ –ö—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD""", reply_markup=main_keyboard())
                else:
                    await query.message.reply_text("""‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!
üí∞ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD""", reply_markup=main_keyboard())
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if not ea_file_data:
                await query.message.reply_text("""‚ùå EA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!
üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ê–¥–º–∏–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª
‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx""", reply_markup=main_keyboard())
                return
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                file_obj = BytesIO(ea_file_data['data'])
                file_obj.name = ea_file_data['filename']
                
                if user_data['license_type'] == "trial":
                    caption_text = f"""ü§ñ EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{user_data['license_key']}`
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚è∞ –°—Ä–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 3 –¥–Ω—è

üéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ EA –Ω–∞ MT4/MT5
2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö EA –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á: {user_data['license_key']}
3. EA –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Å—á–µ—Ç—É
4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ 3 –¥–Ω—è

üîê –í–ê–ñ–ù–û: –ö–ª—é—á –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É!
üí∞ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD!

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""
                else:
                    caption_text = f"""ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{user_data['license_key']}`
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è VPS

üéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ EA –Ω–∞ MT4/MT5
2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö EA –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á: {user_data['license_key']}
3. EA —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Å—è—Ü –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏

üîê –ó–ê–©–ò–¢–ê: –ö–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
üåê API –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Railway

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""
                
                await query.message.reply_document(
                    document=file_obj,
                    filename=ea_file_data['filename'],
                    caption=caption_text,
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                await query.message.reply_text("""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!
üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å Telegram
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
        
        elif data.startswith("approve_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            result = approve_payment(payment_id)
            
            if result:
                license_key, target_user_id, expires = result
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")]]
                    
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"""üéâ –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!

‚úÖ –ú–µ—Å—è—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üîë –í–∞—à –∫–ª—é—á: `{license_key}`
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime(expires)}
üîê –ö–ª—é—á –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ - –æ–Ω –ü–û–°–¢–û–Ø–ù–ù–´–ô!
üìÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å EA!""",
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
                
                await query.message.edit_text(f"""‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω!

üîë –ö–ª—é—á: `{license_key}`
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω
‚è∞ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–æ: {format_datetime(expires)}
üîê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–¥–ª–µ–Ω""", parse_mode='Markdown')
        
        elif data.startswith("reject_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            await query.message.edit_text("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û
# ===============================
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.user_data.get('waiting_receipt'):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        payment_id = context.user_data.get('payment_id')
        
        if not payment_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        user_data = get_user_data(user_id)
        user_key = user_data['license_key'] or generate_user_key(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        try:
            keyboard = [[
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{payment_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
            ]]
            
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=file_id,
                caption=f"""üí≥ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ü–õ–ê–¢–£

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})
üîë –ö–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_key}
üíµ –°—É–º–º–∞: 100 USD (1 –º–µ—Å—è—Ü)
üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{payment_id}

üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
VISA: {VISA_CARD}
HUMO: {HUMO_CARD}
–í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}

üîê –í–ê–ñ–ù–û: –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–æ—Ç –∂–µ –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω!""",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            await update.message.reply_text("""‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
üîê –í–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω
üìû –í–æ–ø—Ä–æ—Å—ã: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
            
            context.user_data.pop('waiting_receipt', None)
            context.user_data.pop('payment_id', None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ photo_handler: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í
# ===============================
async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        document = update.message.document
        
        if not document.file_name.lower().endswith('.ex5'):
            await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .ex5!")
            return
        
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return
        
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        
        try:
            file = await document.get_file()
            file_data = await file.download_as_bytearray()
            
            if not file_data:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            global ea_file_data
            ea_file_data = {
                'filename': document.file_name,
                'data': file_data
            }
            
            await update.message.reply_text(f"""‚úÖ EA —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–¥–∞—á–µ!

üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}
üìä –†–∞–∑–º–µ—Ä: {len(file_data):,} –±–∞–π—Ç
üéØ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª!
üîê –§–∞–π–ª –∑–∞—â–∏—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è
üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –Ω–∞ Railway

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: /stats""")
            
            logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {document.file_name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ document_handler: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
# ===============================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

# ===============================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ===============================
def main():
    if not TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return
    
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_bot = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app_bot.add_handler(CommandHandler("start", start_command))
    app_bot.add_handler(CommandHandler("stats", stats_command))
    app_bot.add_handler(CommandHandler("test_license", test_license_command))
    app_bot.add_handler(CallbackQueryHandler(button_handler))
    app_bot.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app_bot.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app_bot.add_error_handler(error_handler)
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 60)
    print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"üåê API URL: {API_BASE_URL}")
    print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: 100 USD")
    print("=" * 60)
    print("üîê –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´:")
    print("‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("‚Ä¢ API –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Railway")
    print("‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–µ–π –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Å—á–µ—Ç–∞–º")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏")
    print("=" * 60)
    print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    print("/test_license <–∫–ª—é—á> <—Å—á–µ—Ç> - –¢–µ—Å—Ç API (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    print("=" * 60)
    print("‚ö° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å API!")
    
    try:
        app_bot.run_polling(
            drop_pending_updates=True,
            pool_timeout=60,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")

if __name__ == '__main__':
    main()
