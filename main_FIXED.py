#!/usr/bin/env python3
from flask import Flask, jsonify, request
import sqlite3
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ============================================================================
# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–î–ò–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –° TELEGRAM –ë–û–¢–û–ú
# ============================================================================

DATABASE_PATH = 'license_system.db'

def init_database():
    """–ü–û–õ–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (—Ç–µ –∂–µ —á—Ç–æ –≤ telegram –±–æ—Ç–µ)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS licenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                license_key TEXT UNIQUE NOT NULL,
                account_number TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                expires_at DATETIME NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                plan_type TEXT NOT NULL,
                telegram_user_id TEXT,
                payment_verified BOOLEAN DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id TEXT UNIQUE NOT NULL,
                username TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                total_licenses INTEGER DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id TEXT NOT NULL,
                license_key TEXT NOT NULL,
                amount REAL NOT NULL,
                plan_type TEXT NOT NULL,
                payment_method TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                verified BOOLEAN DEFAULT 0
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_license_key ON licenses(license_key)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_account_number ON licenses(account_number)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_telegram_user_id ON licenses(telegram_user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_expires_at ON licenses(expires_at)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_payment_verified ON licenses(payment_verified)')
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [table[0] for table in cursor.fetchall()]
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
        
        cursor.execute("SELECT COUNT(*) FROM licenses")
        license_count = cursor.fetchone()[0]
        logger.info(f"üîê –õ–∏—Ü–µ–Ω–∑–∏–π –≤ –±–∞–∑–µ: {license_count}")
        
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö API –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î API: {e}")
        raise

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# ============================================================================
# üîê API ENDPOINTS
# ============================================================================

@app.route('/', methods=['GET'])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return jsonify({
        "service": "RFX Trading License API",
        "version": "2.0",
        "status": "active",
        "description": "License verification system for MT5 Expert Advisor",
        "endpoints": {
            "check_license": "/check_license/<license_key>/<account_number>",
            "health": "/health",
            "stats": "/stats"
        }
    })

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM licenses")
        total_licenses = cursor.fetchone()[0]
        conn.close()
        
        return jsonify({
            "status": "healthy",
            "database": "connected",
            "total_licenses": total_licenses,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM licenses")
        total_licenses = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM licenses WHERE is_active = 1 AND payment_verified = 1")
        active_licenses = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM licenses WHERE payment_verified = 0")
        pending_payments = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM licenses WHERE expires_at < datetime('now')")
        expired_licenses = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT telegram_user_id) FROM licenses")
        total_users = cursor.fetchone()[0]
        
        conn.close()
        
        return jsonify({
            "total_licenses": total_licenses,
            "active_licenses": active_licenses,
            "pending_payments": pending_payments,
            "expired_licenses": expired_licenses,
            "total_users": total_users,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        return jsonify({"error": "Failed to get stats"}), 500

@app.route('/check_license/<license_key>/<account_number>', methods=['GET'])
def check_license(license_key, account_number):
    """
    üîê –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    """
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: {license_key} –¥–ª—è —Å—á–µ—Ç–∞: {account_number}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ò—â–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            SELECT license_key, account_number, expires_at, is_active, payment_verified, plan_type
            FROM licenses 
            WHERE license_key = ?
        ''', (license_key,))
        
        license_data = cursor.fetchone()
        
        if not license_data:
            logger.warning(f"‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {license_key}")
            conn.close()
            return jsonify({
                "valid": False,
                "reason": "key_not_found",
                "message": "License key not found in database",
                "license_key": license_key
            }), 404
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        db_license_key = license_data['license_key']
        db_account_number = license_data['account_number']
        expires_at = license_data['expires_at']
        is_active = license_data['is_active']
        payment_verified = license_data['payment_verified']
        plan_type = license_data['plan_type']
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è: {db_license_key}")
        logger.info(f"üîç –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç: {db_account_number}")
        logger.info(f"üîç –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {payment_verified}")
        logger.info(f"üîç –ê–∫—Ç–∏–≤–Ω–∞: {is_active}")
        logger.info(f"üîç –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        if not payment_verified:
            logger.warning(f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {license_key}")
            conn.close()
            return jsonify({
                "valid": False,
                "reason": "payment_not_verified",
                "message": "Payment not verified",
                "license_key": license_key
            }), 402  # Payment Required
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if not is_active:
            logger.warning(f"‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞: {license_key}")
            conn.close()
            return jsonify({
                "valid": False,
                "reason": "license_inactive",
                "message": "License is inactive",
                "license_key": license_key
            }), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        try:
            expires_date = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
            if expires_date < datetime.now():
                logger.warning(f"‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞: {license_key} (–∏—Å—Ç–µ–∫–ª–∞: {expires_date})")
                conn.close()
                return jsonify({
                    "valid": False,
                    "reason": "expired",
                    "message": "License has expired",
                    "license_key": license_key,
                    "expired_at": expires_at
                }), 410  # Gone
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
        if db_account_number and db_account_number != account_number:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç: {account_number} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {db_account_number})")
            conn.close()
            return jsonify({
                "valid": False,
                "reason": "wrong_account",
                "message": "License is bound to different account",
                "license_key": license_key,
                "bound_account": db_account_number,
                "requested_account": account_number
            }), 403
        
        # –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
        if not db_account_number:
            logger.info(f"üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é {license_key} –∫ —Å—á–µ—Ç—É {account_number}")
            cursor.execute('''
                UPDATE licenses 
                SET account_number = ? 
                WHERE license_key = ?
            ''', (account_number, license_key))
            conn.commit()
            
        conn.close()
        
        # ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´
        logger.info(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {license_key} –¥–ª—è —Å—á–µ—Ç–∞: {account_number}")
        
        return jsonify({
            "valid": True,
            "message": "License is valid",
            "license_key": license_key,
            "account_number": account_number,
            "plan_type": plan_type,
            "expires_at": expires_at,
            "verified_at": datetime.now().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return jsonify({
            "valid": False,
            "reason": "server_error",
            "message": "Internal server error",
            "error": str(e)
        }), 500

@app.route('/check_license/<license_key>', methods=['GET'])
def check_license_simple(license_key):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
    return check_license(license_key, "")

# ============================================================================
# üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï API ENDPOINTS –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

@app.route('/admin/licenses', methods=['GET'])
def admin_get_licenses():
    """–ê–¥–º–∏–Ω: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT license_key, account_number, created_at, expires_at, 
                   is_active, payment_verified, plan_type, telegram_user_id
            FROM licenses 
            ORDER BY created_at DESC
            LIMIT 100
        ''')
        
        licenses = []
        for row in cursor.fetchall():
            licenses.append({
                "license_key": row['license_key'],
                "account_number": row['account_number'],
                "created_at": row['created_at'],
                "expires_at": row['expires_at'],
                "is_active": bool(row['is_active']),
                "payment_verified": bool(row['payment_verified']),
                "plan_type": row['plan_type'],
                "telegram_user_id": row['telegram_user_id']
            })
        
        conn.close()
        
        return jsonify({
            "total": len(licenses),
            "licenses": licenses
        })
        
    except Exception as e:
        logger.error(f"Admin licenses error: {e}")
        return jsonify({"error": "Failed to get licenses"}), 500

@app.route('/admin/verify_payment/<license_key>', methods=['POST'])
def admin_verify_payment(license_key):
    """–ê–¥–º–∏–Ω: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        cursor.execute('SELECT id FROM licenses WHERE license_key = ?', (license_key,))
        if not cursor.fetchone():
            conn.close()
            return jsonify({"error": "License not found"}), 404
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
        cursor.execute('''
            UPDATE licenses 
            SET payment_verified = 1 
            WHERE license_key = ?
        ''', (license_key,))
        
        cursor.execute('''
            UPDATE payments 
            SET verified = 1 
            WHERE license_key = ?
        ''', (license_key,))
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É: {license_key}")
        
        return jsonify({
            "success": True,
            "message": "Payment verified successfully",
            "license_key": license_key
        })
        
    except Exception as e:
        logger.error(f"Admin verify payment error: {e}")
        return jsonify({"error": "Failed to verify payment"}), 500

# ============================================================================
# üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ============================================================================

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_database()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RFX Trading License API Server")
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info("üîê API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
