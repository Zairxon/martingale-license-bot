#!/usr/bin/env python3
import sqlite3
import hashlib
import time
from datetime import datetime, timedelta

# ============================================================================
# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–î–ò–ù–ê–Ø –°–•–ï–ú–ê –ë–î –î–õ–Ø –ë–û–¢–ê –ò API
# ============================================================================

DATABASE_PATH = 'license_system.db'

def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ –∏ API"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # ============================================================================
        # üìã –¢–ê–ë–õ–ò–¶–ê –õ–ò–¶–ï–ù–ó–ò–ô (–û–°–ù–û–í–ù–ê–Ø)
        # ============================================================================
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS licenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                license_key TEXT UNIQUE NOT NULL,
                account_number TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                expires_at DATETIME NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                plan_type TEXT NOT NULL,
                telegram_user_id TEXT,
                payment_verified BOOLEAN DEFAULT 0
            )
        ''')
        
        # ============================================================================
        # üë• –¢–ê–ë–õ–ò–¶–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        # ============================================================================
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id TEXT UNIQUE NOT NULL,
                username TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                total_licenses INTEGER DEFAULT 0
            )
        ''')
        
        # ============================================================================
        # üí∞ –¢–ê–ë–õ–ò–¶–ê –ü–õ–ê–¢–ï–ñ–ï–ô
        # ============================================================================
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_user_id TEXT NOT NULL,
                license_key TEXT NOT NULL,
                amount REAL NOT NULL,
                plan_type TEXT NOT NULL,
                payment_method TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                verified BOOLEAN DEFAULT 0
            )
        ''')
        
        # ============================================================================
        # üìä –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–û–ò–°–ö–ê
        # ============================================================================
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_license_key ON licenses(license_key)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_account_number ON licenses(account_number)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_telegram_user_id ON licenses(telegram_user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_expires_at ON licenses(expires_at)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_payment_verified ON licenses(payment_verified)')
        
        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # ============================================================================
        # üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ê–ë–õ–ò–¶–ê–•
        # ============================================================================
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}")
        
        cursor.execute("SELECT COUNT(*) FROM licenses")
        license_count = cursor.fetchone()[0]
        print(f"üîê –õ–∏—Ü–µ–Ω–∑–∏–π –≤ –±–∞–∑–µ: {license_count}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

def generate_test_license():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    timestamp = str(int(time.time()))[-6:]
    random_part = hashlib.md5(b"test_license_key").hexdigest()[:12].upper()
    
    # –§–æ—Ä–º–∞—Ç: RFX-XXXX-XXXX-XXXX-XXX-XX
    key_parts = [
        "RFX",
        random_part[:4],
        random_part[4:8], 
        random_part[8:12],
        timestamp[:3],
        timestamp[3:5]
    ]
    
    return "-".join(key_parts)

def add_test_data():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
        test_license = generate_test_license()
        expires_at = datetime.now() + timedelta(days=30)
        
        cursor.execute('''
            INSERT OR IGNORE INTO licenses 
            (license_key, plan_type, expires_at, is_active, payment_verified, telegram_user_id)
            VALUES (?, ?, ?, 1, 1, ?)
        ''', (test_license, "1_month", expires_at, "12345"))
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
            INSERT OR IGNORE INTO users 
            (telegram_user_id, username, total_licenses)
            VALUES (?, ?, 1)
        ''', ("12345", "test_user"))
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        cursor.execute('''
            INSERT OR IGNORE INTO payments 
            (telegram_user_id, license_key, amount, plan_type, verified)
            VALUES (?, ?, 30.0, ?, 1)
        ''', ("12345", test_license, "1_month"))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"üîê –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {test_license}")
        print(f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}")
        
        return test_license
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def verify_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [table[0] for table in cursor.fetchall()]
        
        required_tables = ['licenses', 'users', 'payments']
        missing_tables = [table for table in required_tables if table not in tables]
        
        if missing_tables:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã licenses
        cursor.execute("PRAGMA table_info(licenses)")
        columns = [column[1] for column in cursor.fetchall()]
        
        required_columns = [
            'id', 'license_key', 'account_number', 'created_at', 
            'expires_at', 'is_active', 'plan_type', 'telegram_user_id', 
            'payment_verified'
        ]
        
        missing_columns = [col for col in required_columns if col not in columns]
        
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ licenses: {missing_columns}")
            return False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM licenses")
        total_licenses = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM licenses WHERE payment_verified = 1")
        verified_licenses = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–π: {total_licenses}")
        print(f"   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {verified_licenses}")
        print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è RFX Trading")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if create_database():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if verify_database():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_license = add_test_data()
    
    print("=" * 60)
    print("üéâ –°–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –±–æ—Ç–∞: python telegram_bot_FIXED.py")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: python main_FIXED.py")
    print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –≤ MT5 —Å–æ–≤–µ—Ç–Ω–∏–∫–µ")
    
    if test_license:
        print(f"üîê –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {test_license}")
    
    print("=" * 60)

if __name__ == '__main__':
    main()
