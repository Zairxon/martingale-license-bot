#!/usr/bin/env python3
import os
import sqlite3
import secrets
import string
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot")
    print("pip install python-telegram-bot")
    exit(1)

# ===============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===============================

TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 295698267
LICENSE_PRICE = 100

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
VISA_CARD = "4278 3100 2430 7167"
HUMO_CARD = "9860 1001 2541 9018"
CARD_OWNER = "Asqarov Rasulbek"

print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
print(f"üë®‚Äçüíº Admin ID: {ADMIN_ID}")
print(f"üí≥ VISA: {VISA_CARD}")
print(f"üí≥ HUMO: {HUMO_CARD}")

# ===============================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ===============================

def init_db():
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            license_key TEXT,
            license_type TEXT DEFAULT 'none',
            license_status TEXT DEFAULT 'inactive',
            expires_at TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount INTEGER DEFAULT 100,
            status TEXT DEFAULT 'pending',
            receipt_file_id TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ EA —Ñ–∞–π–ª–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS ea_files (
            id INTEGER PRIMARY KEY,
            filename TEXT,
            file_data BLOB
        )''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

# ===============================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ===============================

def generate_key():
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(16))

def is_admin(user_id):
    return int(user_id) == ADMIN_ID

# ===============================
# –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ===============================

def register_user(user_id, username):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def get_user_license(user_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('SELECT license_key, license_type, license_status, expires_at FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        conn.close()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None

def create_trial_license(user_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
        c.execute('SELECT license_type FROM users WHERE user_id = ? AND license_type = "trial"', (user_id,))
        if c.fetchone():
            conn.close()
            return None, "–£ –≤–∞—Å —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 1 –ú–ï–°–Ø–¶
        key = generate_key()
        expires = (datetime.now() + timedelta(days=30)).isoformat()  # 30 –¥–Ω–µ–π –≤–º–µ—Å—Ç–æ 3
        
        c.execute('''UPDATE users SET 
            license_key = ?, license_type = 'trial', license_status = 'active', expires_at = ?
            WHERE user_id = ?''', (key, expires, user_id))
        
        conn.commit()
        conn.close()
        return key, None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"

def create_full_license(user_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        key = generate_key()
        c.execute('''UPDATE users SET 
            license_key = ?, license_type = 'full', license_status = 'active', expires_at = NULL
            WHERE user_id = ?''', (key, user_id))
        
        conn.commit()
        conn.close()
        return key
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None

def create_payment_request(user_id, username):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('INSERT INTO payments (user_id, username) VALUES (?, ?)', (user_id, username))
        payment_id = c.lastrowid
        conn.commit()
        conn.close()
        return payment_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return None

def save_receipt(payment_id, file_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('UPDATE payments SET receipt_file_id = ? WHERE id = ?', (file_id, payment_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        return False

def approve_payment(payment_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        c.execute('SELECT user_id FROM payments WHERE id = ?', (payment_id,))
        result = c.fetchone()
        if not result:
            conn.close()
            return None
        
        user_id = result[0]
        license_key = create_full_license(user_id)
        
        if license_key:
            c.execute('UPDATE payments SET status = "approved" WHERE id = ?', (payment_id,))
            conn.commit()
        
        conn.close()
        return license_key, user_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        return None

def save_ea_file(file_data, filename):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('DELETE FROM ea_files')
        c.execute('INSERT INTO ea_files (filename, file_data) VALUES (?, ?)', (filename, file_data))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è EA: {e}")
        return False

def get_ea_file():
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('SELECT file_data FROM ea_files LIMIT 1')
        result = c.fetchone()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è EA: {e}")
        return None

def get_stats():
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        c.execute('SELECT COUNT(*) FROM users')
        total_users = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_status = "active"')
        active = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_type = "trial"')
        trial = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_type = "full"')
        full = c.fetchone()[0]
        
        conn.close()
        return {'total': total_users, 'active': active, 'trial': trial, 'full': full}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'total': 0, 'active': 0, 'trial': 0, 'full': 0}

# ===============================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ===============================

def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üÜì 1 –º–µ—Å—è—Ü –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="trial")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é $100", callback_data="buy")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ EA", callback_data="info")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===============================
# –¢–ï–ö–°–¢–´
# ===============================

EA_INFO = """ü§ñ **–¢–û–†–ì–û–í–´–ô –°–û–í–ï–¢–ù–ò–ö**
**–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞**

üìä **–°–∏–º–≤–æ–ª—ã:** BTCUSD, XAUUSD
‚ö° **VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω**
üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–æ–∫**
üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è**

üí∞ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç:** –æ—Ç $1000

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @rasul_asqarov_rfx
üë• **–ì—Ä—É–ø–ø–∞:** t.me/RFx_Group"""

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ===============================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        register_user(user.id, user.username or "Unknown")
        
        text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è**
üìä **–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞**
‚ö° **VPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**

üí° **–û–ø—Ü–∏–∏:**
üÜì –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è - 1 –ú–ï–°–Ø–¶ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üí∞ –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è - $100 (–Ω–∞–≤—Å–µ–≥–¥–∞)

üìû @rasul_asqarov_rfx
üë• t.me/RFx_Group"""
        
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        stats = get_stats()
        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}
üÜì –ü—Ä–æ–±–Ω—ã—Ö: {stats['trial']}
üí∞ –ü–æ–ª–Ω—ã—Ö: {stats['full']}

üíµ –î–æ—Ö–æ–¥: ${stats['full'] * LICENSE_PRICE}"""
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
# ===============================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "trial":
            key, error = create_trial_license(user_id)
            if error:
                await query.message.reply_text(f"‚ùå {error}", reply_markup=main_keyboard())
            else:
                text = f"""üéâ **–ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

üîë **–í–∞—à –∫–ª—é—á:** `{key}`
‚è∞ **–°—Ä–æ–∫:** 1 –ú–ï–°–Ø–¶ (30 –¥–Ω–µ–π)

üìÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å EA"""
                
                keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")]]
                await query.message.reply_text(text, parse_mode='Markdown', 
                                             reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif data == "buy":
            payment_id = create_payment_request(user_id, query.from_user.username or "Unknown")
            if payment_id:
                context.user_data['payment_id'] = payment_id
                
                text = f"""üí≥ **–û–ü–õ–ê–¢–ê –õ–ò–¶–ï–ù–ó–ò–ò**

üíµ **–°—É–º–º–∞:** ${LICENSE_PRICE}

üí≥ **–†–ï–ö–í–ò–ó–ò–¢–´:**
üè¶ **VISA:** `{VISA_CARD}`
üè¶ **HUMO:** `{HUMO_CARD}`
üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {CARD_OWNER}

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${LICENSE_PRICE} –Ω–∞ –∫–∞—Ä—Ç—É
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞

üìû @rasul_asqarov_rfx"""
                
                keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]]
                await query.message.reply_text(text, parse_mode='Markdown',
                                             reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif data == "paid":
            await query.message.reply_text(f"""üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫**

–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –Ω–∞ —Å—É–º–º—É ${LICENSE_PRICE}

‚úÖ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è  
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: 10-30 –º–∏–Ω—É—Ç""")
            
            context.user_data['waiting_receipt'] = True
        
        elif data == "status":
            license_data = get_user_license(user_id)
            
            if not license_data or not license_data[0]:
                text = """‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**

–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—É—é –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–ª–Ω—É—é."""
                await query.message.reply_text(text, reply_markup=main_keyboard())
            else:
                key, license_type, status, expires = license_data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
                if expires:
                    try:
                        if datetime.now() > datetime.fromisoformat(expires):
                            status = "expired"
                    except:
                        pass
                
                status_emoji = "‚úÖ" if status == "active" else "‚ùå"
                type_emoji = "üÜì" if license_type == "trial" else "üí∞"
                
                text = f"""{status_emoji} **–°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏**

üîë **–ö–ª—é—á:** `{key}`
{type_emoji} **–¢–∏–ø:** {license_type.title()}
üìä **–°—Ç–∞—Ç—É—Å:** {status.title()}"""
                
                if expires and license_type == "trial":
                    text += f"\n‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expires[:10]}"
                elif license_type == "full":
                    text += f"\n‚ôæÔ∏è **–°—Ä–æ–∫:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
                
                keyboard = []
                if status == "active":
                    keyboard.append([InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")])
                
                await query.message.reply_text(text, parse_mode='Markdown',
                                             reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif data == "info":
            await query.message.reply_text(EA_INFO, parse_mode='Markdown', reply_markup=main_keyboard())
        
        elif data == "download":
            license_data = get_user_license(user_id)
            
            if not license_data or license_data[2] != 'active':
                await query.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏!", reply_markup=main_keyboard())
                return
            
            key = license_data[0]
            
            await query.message.reply_text(f"""üìÅ **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ EA**

üîë **–í–∞—à –∫–ª—é—á:** `{key}`

‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...""", parse_mode='Markdown')
            
            ea_data = get_ea_file()
            if ea_data:
                await query.message.reply_document(
                    document=ea_data,
                    filename="Bogdanov_Strategy_EA.ex5",
                    caption=f"üîë –ö–ª—é—á: `{key}`",
                    parse_mode='Markdown'
                )
            else:
                await query.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx")
        
        elif data.startswith("approve_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            result = approve_payment(payment_id)
            
            if result:
                license_key, target_user_id = result
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"""üéâ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!**

‚úÖ –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üîë **–ö–ª—é—á:** `{license_key}`
‚ôæÔ∏è **–°—Ä–æ–∫:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π""",
                        parse_mode='Markdown'
                    )
                except:
                    pass
                
                await query.message.edit_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω\nüîë –ö–ª—é—á: `{license_key}`", 
                                            parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û
# ===============================

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.user_data.get('waiting_receipt'):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        payment_id = context.user_data.get('payment_id')
        
        if not payment_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫
        if save_receipt(payment_id, file_id):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{payment_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
                ]]
                
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=file_id,
                    caption=f"""üí≥ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**

üë§ @{username} (ID: {user_id})
üíµ –°—É–º–º–∞: ${LICENSE_PRICE}
üÜî –ó–∞—è–≤–∫–∞: {payment_id}

üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:
VISA: {VISA_CARD}
HUMO: {HUMO_CARD}""",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                await update.message.reply_text("""‚úÖ **–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!**

üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: 10-30 –º–∏–Ω—É—Ç
üîî –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üìû @rasul_asqarov_rfx""", reply_markup=main_keyboard())
                
                context.user_data.pop('waiting_receipt', None)
                context.user_data.pop('payment_id', None)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ photo_handler: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í
# ===============================

async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        if not update.message.document.file_name.endswith('.ex5'):
            await update.message.reply_text("‚ùå –ù—É–∂–µ–Ω —Ñ–∞–π–ª .ex5!")
            return
        
        file = await update.message.document.get_file()
        file_data = await file.download_as_bytearray()
        
        if save_ea_file(file_data, update.message.document.file_name):
            await update.message.reply_text(f"""‚úÖ **–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!**

üìÅ {update.message.document.file_name}
üìä {len(file_data)} –±–∞–π—Ç""")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ document_handler: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
# ===============================

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# ===============================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ===============================

def main():
    if not TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üÜì –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è: 1 –ú–ï–°–Ø–¶")
    print("üí∞ –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è: $100")
    print("üìã –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: /stats")
    print("üö´ –ü–ª–∞—Ç–µ–∂–∏ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±–æ—Ç–∞!")
    
    # –ó–∞–ø—É—Å–∫
    app.run_polling(drop_pending_updates=True, pool_timeout=20)

if __name__ == '__main__':
    main()
