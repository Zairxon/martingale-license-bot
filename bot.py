import os
import sqlite3
import secrets
import string
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 295698267
LICENSE_PRICE = 100

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
VISA_CARD = "4278 3100 2430 7167"
HUMO_CARD = "9860 1001 2541 9018"
CARD_OWNER = "Asqarov Rasulbek"

print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
print(f"üë®‚Äçüíº Admin ID: {ADMIN_ID}")
print(f"üí≥ VISA: {VISA_CARD}")
print(f"üí≥ HUMO: {HUMO_CARD}")
print(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        license_key TEXT,
        license_type TEXT DEFAULT 'none',
        license_status TEXT DEFAULT 'inactive',
        expires_at TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        amount INTEGER DEFAULT 100,
        status TEXT DEFAULT 'pending',
        receipt_file_id TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS ea_files (
        id INTEGER PRIMARY KEY,
        filename TEXT,
        file_data BLOB
    )''')
    
    conn.commit()
    conn.close()

def generate_key():
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(16))

def is_admin(user_id):
    return int(user_id) == ADMIN_ID

def register_user(user_id, username):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

def get_user_license(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT license_key, license_type, license_status, expires_at FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result

def create_trial_license(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
    c.execute('SELECT license_type FROM users WHERE user_id = ? AND license_type = "trial"', (user_id,))
    if c.fetchone():
        conn.close()
        return None, "–£ –≤–∞—Å —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
    key = generate_key()
    expires = (datetime.now() + timedelta(days=3)).isoformat()
    
    c.execute('''UPDATE users SET 
        license_key = ?, license_type = 'trial', license_status = 'active', expires_at = ?
        WHERE user_id = ?''', (key, expires, user_id))
    
    conn.commit()
    conn.close()
    return key, None

def create_full_license(user_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    key = generate_key()
    c.execute('''UPDATE users SET 
        license_key = ?, license_type = 'full', license_status = 'active', expires_at = NULL
        WHERE user_id = ?''', (key, user_id))
    
    conn.commit()
    conn.close()
    return key

def create_payment_request(user_id, username):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT INTO payments (user_id, username) VALUES (?, ?)', (user_id, username))
    payment_id = c.lastrowid
    conn.commit()
    conn.close()
    return payment_id

def save_receipt(payment_id, file_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('UPDATE payments SET receipt_file_id = ? WHERE id = ?', (file_id, payment_id))
    conn.commit()
    conn.close()

def approve_payment(payment_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute('SELECT user_id FROM payments WHERE id = ?', (payment_id,))
    result = c.fetchone()
    if not result:
        conn.close()
        return None
    
    user_id = result[0]
    license_key = create_full_license(user_id)
    
    c.execute('UPDATE payments SET status = "approved" WHERE id = ?', (payment_id,))
    conn.commit()
    conn.close()
    
    return license_key, user_id

def reject_payment(payment_id):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute('SELECT user_id FROM payments WHERE id = ?', (payment_id,))
    result = c.fetchone()
    if not result:
        conn.close()
        return None
    
    user_id = result[0]
    c.execute('UPDATE payments SET status = "rejected" WHERE id = ?', (payment_id,))
    conn.commit()
    conn.close()
    
    return user_id

def save_ea_file(file_data, filename):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('DELETE FROM ea_files')
    c.execute('INSERT INTO ea_files (filename, file_data) VALUES (?, ?)', (filename, file_data))
    conn.commit()
    conn.close()

def get_ea_file():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT file_data FROM ea_files LIMIT 1')
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def get_stats():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute('SELECT COUNT(*) FROM users')
    total_users = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM users WHERE license_status = "active"')
    active = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM users WHERE license_type = "trial"')
    trial = c.fetchone()[0]
    
    c.execute('SELECT COUNT(*) FROM users WHERE license_type = "full"')
    full = c.fetchone()[0]
    
    conn.close()
    return {'total': total_users, 'active': active, 'trial': trial, 'full': full}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üÜì 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="trial")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é $100", callback_data="buy")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="info")],
        [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –¢–µ–∫—Å—Ç—ã
EA_INFO = """
ü§ñ **–¢–û–†–ì–û–í–´–ô –°–û–í–ï–¢–ù–ò–ö - –°–¢–†–ê–¢–ï–ì–ò–Ø –ë–û–ì–î–ê–ù–û–í–ê**

üìä **–†–∞–±–æ—Ç–∞–µ—Ç —Å:** BTCUSD, XAUUSD (Gold)
‚ö° **VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω**
üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–æ–∫**
üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è**

üí∞ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç:** –æ—Ç $1000
"""

INSTRUCTION = """
üìñ **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï**

1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª EA –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
2Ô∏è‚É£ –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É MetaTrader 5/MQL5/Experts/
3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MetaTrader 5
4Ô∏è‚É£ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ EA –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @rasul_asqarov_rfx
üë• **–ì—Ä—É–ø–ø–∞:** t.me/RFx_Group
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_user(user.id, user.username or "Unknown")
    
    text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EA License Bot!**

üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–æ–≥–¥–∞–Ω–æ–≤–∞**
üìä BTCUSD –∏ XAUUSD
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:**
üÜì –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è - 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üí∞ –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è - $100 (–Ω–∞–≤—Å–µ–≥–¥–∞)

üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
"""
    
    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=main_keyboard())

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    stats = get_stats()
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π: {stats['active']}
üÜì –ü—Ä–æ–±–Ω—ã—Ö: {stats['trial']}
üí∞ –ü–æ–ª–Ω—ã—Ö: {stats['full']}

üíµ –î–æ—Ö–æ–¥: ${stats['full'] * LICENSE_PRICE}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def upload_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await update.message.reply_text("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "trial":
        key, error = create_trial_license(user_id)
        if error:
            await query.message.reply_text(f"‚ùå {error}", reply_markup=main_keyboard())
        else:
            text = f"""üéâ **–ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

üîë **–í–∞—à –∫–ª—é—á:** `{key}`
‚è∞ **–°—Ä–æ–∫:** 3 –¥–Ω—è

üìÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å EA"""
            
            keyboard = [
                [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
            ]
            await query.message.reply_text(text, parse_mode='Markdown', 
                                         reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "buy":
        payment_id = create_payment_request(user_id, query.from_user.username or "Unknown")
        context.user_data['payment_id'] = payment_id
        
        text = f"""üí≥ **–û–ü–õ–ê–¢–ê –õ–ò–¶–ï–ù–ó–ò–ò**

üíµ **–°—É–º–º–∞:** ${LICENSE_PRICE}

üí≥ **–†–ï–ö–í–ò–ó–ò–¢–´:**
üè¶ **VISA:** `{VISA_CARD}`
üè¶ **HUMO:** `{HUMO_CARD}`
üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {CARD_OWNER}

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${LICENSE_PRICE} –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.message.reply_text(text, parse_mode='Markdown',
                                     reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "paid":
        await query.message.reply_text("""üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ**

üìã –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –Ω–∞ —Å—É–º–º—É ${} 

‚úÖ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è

‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: 10-30 –º–∏–Ω—É—Ç""".format(LICENSE_PRICE))
        
        context.user_data['waiting_receipt'] = True
    
    elif data == "status":
        license_data = get_user_license(user_id)
        
        if not license_data or not license_data[0]:
            text = """‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.
–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—É—é –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–ª–Ω—É—é."""
            await query.message.reply_text(text, reply_markup=main_keyboard())
        else:
            key, license_type, status, expires = license_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            if expires and datetime.now() > datetime.fromisoformat(expires):
                status = "expired"
            
            status_emoji = "‚úÖ" if status == "active" else "‚ùå"
            type_emoji = "üÜì" if license_type == "trial" else "üí∞"
            
            text = f"""{status_emoji} **–°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏**

üîë **–ö–ª—é—á:** `{key}`
{type_emoji} **–¢–∏–ø:** {license_type.title()}
üìä **–°—Ç–∞—Ç—É—Å:** {status.title()}"""
            
            if expires and license_type == "trial":
                text += f"\n‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expires[:10]}"
            elif license_type == "full":
                text += f"\n‚ôæÔ∏è **–°—Ä–æ–∫:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
            
            keyboard = []
            if status == "active":
                keyboard.append([InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
            
            await query.message.reply_text(text, parse_mode='Markdown',
                                         reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "info":
        keyboard = [
            [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")],
            [InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è", callback_data="trial")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.message.reply_text(EA_INFO, parse_mode='Markdown',
                                     reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "help":
        keyboard = [
            [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="info")],
            [InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è", callback_data="trial")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.message.reply_text(INSTRUCTION, parse_mode='Markdown',
                                     reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif data == "download":
        license_data = get_user_license(user_id)
        
        if not license_data or license_data[2] != 'active':
            await query.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏!", reply_markup=main_keyboard())
            return
        
        key = license_data[0]
        
        await query.message.reply_text(f"""üìÅ **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ EA**

üîë **–í–∞—à –∫–ª—é—á:** `{key}`

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –Ω–∏–∂–µ
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ MT5/MQL5/Experts/
3. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...""", parse_mode='Markdown')
        
        ea_data = get_ea_file()
        if ea_data:
            await query.message.reply_document(
                document=ea_data,
                filename="Bogdanov_Strategy_EA.ex5",
                caption=f"üîë **–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:** `{key}`\n\nüí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á!",
                parse_mode='Markdown',
                reply_markup=main_keyboard()
            )
        else:
            await query.message.reply_text("‚ùå –§–∞–π–ª EA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                         reply_markup=main_keyboard())
    
    elif data == "back":
        await start_command(update, context)
    
    elif data.startswith("approve_"):
        if not is_admin(user_id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        payment_id = int(data.split("_")[1])
        result = approve_payment(payment_id)
        
        if result:
            license_key, user_id = result
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")]]
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"""üéâ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!**

‚úÖ –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üîë **–ö–ª—é—á:** `{license_key}`
‚ôæÔ∏è **–°—Ä–æ–∫:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π

üìÅ –ú–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å EA""",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except:
                pass
            
            await query.message.edit_text(f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω**\nüîë –ö–ª—é—á: `{license_key}`", 
                                        parse_mode='Markdown')
    
    elif data.startswith("reject_"):
        if not is_admin(user_id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        payment_id = int(data.split("_")[1])
        user_id = reject_payment(payment_id)
        
        if user_id:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="""‚ùå **–ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞
‚Ä¢ –ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–π —á–µ–∫
‚Ä¢ –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª

üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å: @rasul_asqarov_rfx""",
                    parse_mode='Markdown',
                    reply_markup=main_keyboard()
                )
            except:
                pass
            
            await query.message.edit_text("‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω**")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('waiting_receipt'):
        return
    
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    payment_id = context.user_data.get('payment_id')
    
    if not payment_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    photo = update.message.photo[-1]
    file_id = photo.file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫
    save_receipt(payment_id, file_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{payment_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")]
        ]
        
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=f"""üí≥ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**

üë§ @{username} (ID: {user_id})
üíµ –°—É–º–º–∞: ${LICENSE_PRICE}
üÜî –ó–∞—è–≤–∫–∞: {payment_id}

üí≥ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:
VISA: {VISA_CARD}
HUMO: {HUMO_CARD}
–í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}""",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await update.message.reply_text("""‚úÖ **–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!**

üì∏ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üìû –í–æ–ø—Ä–æ—Å—ã: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
        
        context.user_data.pop('waiting_receipt', None)
        context.user_data.pop('payment_id', None)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not update.message.document.file_name.endswith('.ex5'):
        await update.message.reply_text("‚ùå –ù—É–∂–µ–Ω —Ñ–∞–π–ª .ex5!")
        return
    
    try:
        file = await update.message.document.get_file()
        file_data = await file.download_as_bytearray()
        
        save_ea_file(file_data, update.message.document.file_name)
        
        await update.message.reply_text(f"""‚úÖ **–§–∞–π–ª EA –∑–∞–≥—Ä—É–∂–µ–Ω!**

üìÅ {update.message.document.file_name}
üìä {len(file_data)} –±–∞–π—Ç

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª.""")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    if not TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!")
        return
    
    init_db()
    
    app = Application.builder().token(TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("upload", upload_command))
    
    # Callback'–∏
    app.add_handler(CallbackQueryHandler(button_callback))
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìã –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("‚Ä¢ /upload - –∑–∞–≥—Ä—É–∑–∫–∞ EA")
    print("üö´ –ü–ª–∞—Ç–µ–∂–∏ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±–æ—Ç–∞!")
    
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
