//+------------------------------------------------------------------+
//|                       MartingaleVPS_Enhanced_LICENSED.mq5      |
//|                            VPS Optimized Version + LICENSE     |
//|                       –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è           |
//+------------------------------------------------------------------+
#property copyright "TradingBot 2025 - VPS Enhanced + LICENSE PROTECTION"
#property version   "1.61"
#property description "VPS Optimized Auto Martingale Robot - LICENSED VERSION"

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\OrderInfo.mqh>

//--- Trading objects
CTrade trade;
CPositionInfo position;
COrderInfo order;

//+------------------------------------------------------------------+
//| –°–ò–°–¢–ï–ú–ê –õ–ò–¶–ï–ù–ó–ò–†–û–í–ê–ù–ò–Ø - –ù–ï –£–î–ê–õ–Ø–¢–¨!                           |
//+------------------------------------------------------------------+
input group "=== üîê –õ–ò–¶–ï–ù–ó–ò–Ø ==="
input string LicenseKey = "";                   // –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)

//--- –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bool licenseValid = false;
datetime lastLicenseCheck = 0;
datetime licenseCheckInterval = 24 * 60 * 60;   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
string botURL = "https://martingale-license-bot-production.up.railway.app"; // URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bool tradingBlocked = true;                     // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

//--- Input parameters (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò)
input group "=== –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ==="
input double InitialLot = 0.01;              // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞
input int TakeProfitPips = 10000;            // Take Profit –≤ –ø—É–Ω–∫—Ç–∞—Ö
input int BuyStopPips = 3000;                // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ Buy Stop –≤ –ø—É–Ω–∫—Ç–∞—Ö

input group "=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò ==="
input int MaxDoubling = 15;                  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–≤–æ–µ–Ω–∏–π
input double MaxLotSize = 50.0;              // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞

input group "=== VPS –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ==="
input int MaxRetries = 3;                    // –ú–∞–∫—Å –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
input int RetryDelay = 500;                  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
input int MinTicksForStart = 1;              // –ú–∏–Ω —Ç–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
input bool WaitForMarketOpen = false;        // –ñ–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä—ã–Ω–∫–∞ - –û–¢–ö–õ–Æ–ß–ï–ù–û
input int MarketCheckInterval = 1;           // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–∫–∞ (—Å–µ–∫)

input group "=== –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û –¢–†–ï–ù–î–ê ==="
input int TrendPeriod = 20;                  // –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
input double TrendThreshold = 50.0;          // –ü–æ—Ä–æ–≥ —Ç—Ä–µ–Ω–¥–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
input bool UseMA = true;                     // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é
input int DelayBetweenSessions = 5;          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)

input group "=== –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–°–°–ò–ò ==="
input bool ResetAfterTP = true;              // –°–±—Ä–æ—Å –ø–æ—Å–ª–µ Take Profit
input int MagicNumber = 123456;              // –ú–∞–≥–∏—á–µ—Å–∫–∏–π –Ω–æ–º–µ—Ä
input string CommentPrefix = "VPS_Mart";     // –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

//--- –†–∞–±–æ—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
bool WorkingUseMA = true;
double currentLot = 0.01;
int doublingCount = 0;
bool sessionActive = false;
bool robotStarted = false;
bool marketReady = false;
double sessionStartPrice = 0;
datetime lastTradeTime = 0;
datetime lastSessionEnd = 0;
datetime lastMarketCheck = 0;
double pipValue = 0;
string tradingSymbol = "";
int tickCounter = 0;
int startupDelay = 1;
datetime robotStartTime = 0;

//--- –£—Ä–æ–≤–Ω–∏ —Å–µ—Å—Å–∏–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
double sessionSellLevel = 0;
double sessionBuyLevel = 0;
double sessionTP = 0;
double sessionSL = 0;

//--- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
int maHandle = INVALID_HANDLE;

//--- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
datetime lastTickTime = 0;
int connectionErrors = 0;

//--- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
struct PositionData {
    ulong ticket;
    int type;
    double lots;
    double openPrice;
    double takeProfit;
    double stopLoss;
    datetime openTime;
};

PositionData positions[];

//+------------------------------------------------------------------+
//| üîê –ü–†–û–í–ï–†–ö–ê –õ–ò–¶–ï–ù–ó–ò–ò - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø                    |
//+------------------------------------------------------------------+
bool CheckLicense() {
    Print("üîê === –ü–†–û–í–ï–†–ö–ê –õ–ò–¶–ï–ù–ó–ò–ò ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –≤–≤–µ–¥–µ–Ω
    if(StringLen(LicenseKey) == 0) {
        Alert("‚ùå –û–®–ò–ë–ö–ê: –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω!");
        Print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á!");
        Print("‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–æ–≤–µ—Ç–Ω–∏–∫–∞!");
        return false;
    }
    
    Print("üîê –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: ", StringSubstr(LicenseKey, 0, 8), "...");
    Print("üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...");
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    string checkURL = botURL + "/check_license?key=" + LicenseKey;
    Print("üîê URL –ø—Ä–æ–≤–µ—Ä–∫–∏: ", checkURL);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
    string headers = "";
    char post[], result[];
    int timeout = 5000; // 5 —Å–µ–∫—É–Ω–¥
    
    Print("üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
    int httpResult = WebRequest("GET", checkURL, headers, timeout, post, result, headers);
    
    if(httpResult == -1) {
        int error = GetLastError();
        Print("‚ùå –û–®–ò–ë–ö–ê HTTP –∑–∞–ø—Ä–æ—Å–∞: ", error);
        
        if(error == 4060) {
            Alert("‚ùå –û–®–ò–ë–ö–ê: URL –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" + botURL);
            Print("‚ùå –î–æ–±–∞–≤—å—Ç–µ –≤ MT5: –°–µ—Ä–≤–∏—Å -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –°–æ–≤–µ—Ç–Ω–∏–∫–∏ -> –†–∞–∑—Ä–µ—à–∏—Ç—å WebRequest –¥–ª—è URL:");
            Print("‚ùå ", botURL);
        }
        
        return false;
    }
    
    string response = CharArrayToString(result);
    Print("üîê –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (", httpResult, "): ", response);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
    if(httpResult != 200) {
        Print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. HTTP –∫–æ–¥: ", httpResult);
        Alert("‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ " + IntegerToString(httpResult) + ")");
        return false;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if(StringFind(response, "\"valid\":true") >= 0 || StringFind(response, "active") >= 0) {
        Print("‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê!");
        lastLicenseCheck = TimeCurrent();
        return true;
    } else if(StringFind(response, "expired") >= 0) {
        Alert("‚ùå –õ–ò–¶–ï–ù–ó–ò–Ø –ò–°–¢–ï–ö–õ–ê! –û–±–Ω–æ–≤–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –≤ –±–æ—Ç–µ.");
        Print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞");
        return false;
    } else if(StringFind(response, "invalid") >= 0) {
        Alert("‚ùå –ù–ï–í–ï–†–ù–´–ô –õ–ò–¶–ï–ù–ó–ò–û–ù–ù–´–ô –ö–õ–Æ–ß!");
        Print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á");
        return false;
    } else {
        Print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ", response);
        Alert("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–π");
        return false;
    }
}

//+------------------------------------------------------------------+
//| üîê –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–ò–¶–ï–ù–ó–ò–ò                             |
//+------------------------------------------------------------------+
void CheckLicensePeriodically() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
    if(TimeCurrent() - lastLicenseCheck > licenseCheckInterval) {
        Print("üîê –í—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏...");
        
        bool newStatus = CheckLicense();
        
        if(newStatus != licenseValid) {
            licenseValid = newStatus;
            tradingBlocked = !licenseValid;
            
            if(!licenseValid) {
                Print("‚ùå –õ–ò–¶–ï–ù–ó–ò–Ø –°–¢–ê–õ–ê –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û–ô! –ë–õ–û–ö–ò–†–£–ï–ú –¢–û–†–ì–û–í–õ–Æ!");
                Comment("‚ùå –°–û–í–ï–¢–ù–ò–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù\n" +
                        "üîê –ü–†–ò–ß–ò–ù–ê: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è\n" +
                        "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                        "üîë –ö–õ–Æ–ß: " + StringSubstr(LicenseKey, 0, 8) + "...\n" +
                        "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!");
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
                CloseAllPositionsAndOrders();
            } else {
                Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–Ω–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!");
                Comment("‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê\n" +
                        "üìä –°–¢–ê–¢–£–°: –ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ\n" +
                        "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()));
            }
        }
    }
}

//+------------------------------------------------------------------+
//| üîê –ë–õ–û–ö–ò–†–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò –ü–†–ò –ù–ï–í–ï–†–ù–û–ô –õ–ò–¶–ï–ù–ó–ò–ò                  |
//+------------------------------------------------------------------+
bool IsLicenseValid() {
    if(tradingBlocked) {
        static datetime lastWarning = 0;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        if(TimeCurrent() - lastWarning > 60) {
            Print("üö´ –¢–û–†–ì–û–í–õ–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è");
            lastWarning = TimeCurrent();
            
            Comment("üö´ –¢–û–†–ì–û–í–õ–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê\n" +
                    "üîê –ü–†–ò–ß–ò–ù–ê: –ù–µ–≤–µ—Ä–Ω–∞—è/–∏—Å—Ç–µ–∫—à–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è\n" +
                    "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                    "üîë –ö–õ–Æ–ß: " + (StringLen(LicenseKey) > 0 ? StringSubstr(LicenseKey, 0, 8) + "..." : "–ù–ï –£–ö–ê–ó–ê–ù") + "\n" +
                    "üí° –†–ï–®–ï–ù–ò–ï:\n" +
                    "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á\n" +
                    "   2. –û–±–Ω–æ–≤–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –≤ Telegram –±–æ—Ç–µ\n" +
                    "   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n" +
                    "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @YourSupportBot");
        }
        
        return false;
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ - –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø                      |
//+------------------------------------------------------------------+
int OnInit() {
    Print("üöÄüöÄüöÄ –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –†–û–ë–û–¢–ê üöÄüöÄüöÄ");
    Print("üìã –ù–ê–ó–í–ê–ù–ò–ï –°–û–í–ï–¢–ù–ò–ö–ê: MartingaleVPS_Enhanced v1.61 [LICENSED]");
    Print("üìã –ê–í–¢–û–†: TradingBot 2025 - VPS Enhanced + LICENSE");
    Print("üìã –û–ü–ò–°–ê–ù–ò–ï: VPS Optimized Auto Martingale Robot - LICENSED VERSION");
    
    //+------------------------------------------------------------------+
    //| üîê –ü–ï–†–í–û–û–ß–ï–†–ï–î–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–ò–¶–ï–ù–ó–ò–ò                           |
    //+------------------------------------------------------------------+
    Print("üîê === –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –õ–ò–¶–ï–ù–ó–ò–ò ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –î–û –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    licenseValid = CheckLicense();
    tradingBlocked = !licenseValid;
    
    if(!licenseValid) {
        Print("‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê–Ø –õ–ò–¶–ï–ù–ó–ò–Ø! ‚ùå‚ùå‚ùå");
        
        Comment("‚ùå –°–û–í–ï–¢–ù–ò–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù\n" +
                "üîê –ü–†–ò–ß–ò–ù–ê: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üîë –í–í–ï–î–ï–ù–ù–´–ô –ö–õ–Æ–ß: " + (StringLen(LicenseKey) > 0 ? StringSubstr(LicenseKey, 0, 8) + "..." : "–ù–ï –£–ö–ê–ó–ê–ù") + "\n\n" +
                "üí° –ö–ê–ö –ò–°–ü–†–ê–í–ò–¢–¨:\n" +
                "   1. –ü–æ–ª—É—á–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –≤ Telegram –±–æ—Ç–µ\n" +
                "   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á\n" +
                "   3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞\n" +
                "   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞\n\n" +
                "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @YourSupportBot\n" +
                "üåê –ë–æ—Ç: " + botURL);
        
        Alert("‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù!\n\n–ù–µ–≤–µ—Ä–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è!\n–ü–æ–ª—É—á–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –≤ Telegram –±–æ—Ç–µ!");
        
        // –°–û–í–ï–¢–ù–ò–ö –ù–ï –ë–£–î–ï–¢ –¢–û–†–ì–û–í–ê–¢–¨, –ù–û –û–°–¢–ê–ù–ï–¢–°–Ø –ó–ê–ü–£–©–ï–ù–ù–´–ú –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        Print("üîê –°–æ–≤–µ—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –¢–û–õ–¨–ö–û –ü–†–û–°–ú–û–¢–† (—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)");
    } else {
        Print("‚úÖ‚úÖ‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê! ‚úÖ‚úÖ‚úÖ");
        Print("üîê –ö–ª—é—á: ", StringSubstr(LicenseKey, 0, 8), "...");
        Print("üîê –¢–æ—Ä–≥–æ–≤–ª—è –†–ê–ó–†–ï–®–ï–ù–ê!");
        
        Comment("‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê\n" +
                "üìä –°–¢–ê–¢–£–°: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üîë –ö–õ–Æ–ß: " + StringSubstr(LicenseKey, 0, 8) + "...\n" +
                "ü§ñ –†–ï–ñ–ò–ú: VPS –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π");
    }
    
    //+------------------------------------------------------------------+
    //| –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)            |
    //+------------------------------------------------------------------+
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    tradingSymbol = Symbol();
    robotStartTime = TimeCurrent();
    
    Print("=== VPS –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ê–†–¢–ò–ù–ì–ï–ô–õ –†–û–ë–û–¢ –ó–ê–ü–£–©–ï–ù ===");
    Print("üîß –¢–µ—Ä–º–∏–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω: ", (TerminalInfoInteger(TERMINAL_CONNECTED) ? "–î–ê" : "–ù–ï–¢"));
    Print("üîß –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞: ", (TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) ? "–î–ê" : "–ù–ï–¢"));
    Print("üîß –°—á–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π: ", AccountInfoInteger(ACCOUNT_TRADE_ALLOWED) ? "–î–ê" : "–ù–ï–¢");
    Print("üîß –ë–∞–ª–∞–Ω—Å: $", DoubleToString(AccountInfoDouble(ACCOUNT_BALANCE), 2));
    Print("üîß –°–∏–º–≤–æ–ª: ", tradingSymbol);
    Print("üîß –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç: ", DoubleToString(InitialLot, 3));
    Print("üîß –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å—Ç–æ–ø–æ–≤: ", BuyStopPips, " –ø—É–Ω–∫—Ç–æ–≤");
    Print("üîß Take Profit: ", TakeProfitPips, " –ø—É–Ω–∫—Ç–æ–≤");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    WorkingUseMA = UseMA;
    
    // –°–±—Ä–æ—Å VPS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    marketReady = false;
    tickCounter = 0;
    connectionErrors = 0;
    lastTickTime = TimeCurrent();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å VPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    trade.SetExpertMagicNumber(MagicNumber);
    trade.SetMarginMode();
    trade.SetTypeFillingBySymbol(tradingSymbol);
    trade.SetDeviationInPoints(50);
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—É–Ω–∫—Ç–∞
    CalculatePipValue();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    ShowSymbolInfo();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    if(WorkingUseMA) {
        Print("üìà –°–æ–∑–¥–∞–Ω–∏–µ MA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...");
        maHandle = iMA(tradingSymbol, PERIOD_CURRENT, TrendPeriod, 0, MODE_SMA, PRICE_CLOSE);
        if(maHandle == INVALID_HANDLE) {
            Print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥");
            WorkingUseMA = false;
        } else {
            Print("‚úÖ MA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        }
    } else {
        Print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –±–µ–∑ MA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞");
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    currentLot = InitialLot;
    doublingCount = 0;
    sessionActive = false;
    robotStarted = false;
    
    Print("=== VPS –ù–ê–°–¢–†–û–ô–ö–ò ===");
    Print("–ú–∞–∫—Å –ø–æ–ø—ã—Ç–æ–∫: ", MaxRetries);
    Print("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: ", RetryDelay, " –º—Å");
    Print("–ú–∏–Ω —Ç–∏–∫–æ–≤: ", MinTicksForStart);
    Print("–ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—É—Å–∫–∞: ", startupDelay, " —Å–µ–∫—É–Ω–¥");
    Print("–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Å—Å–∏–∏: ", DelayBetweenSessions, " —Å–µ–∫—É–Ω–¥");
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
    CheckExistingPositions();
    
    // –ó–∞–ø—É—Å–∫ VPS-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if(!sessionActive && licenseValid) {
        Print("üîÑ VPS –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –£–°–ö–û–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú!");
        Print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ–≥–æ ", MinTicksForStart, " —Ç–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!");
        Print("üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ", startupDelay, " —Å–µ–∫—É–Ω–¥");
        Print("üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è!");
        lastMarketCheck = TimeCurrent();
    }
    
    Print("‚úÖ‚úÖ‚úÖ –°–û–í–ï–¢–ù–ò–ö 'MartingaleVPS_Enhanced v1.61 [LICENSED]' –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù! ‚úÖ‚úÖ‚úÖ");
    
    if(licenseValid) {
        Print("ü§ñ –†–æ–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ VPS!");
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        Comment("‚úÖ –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
                "üìä –°–¢–ê–¢–£–°: –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í!\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
                "üîß –ë–ê–õ–ê–ù–°: $" + DoubleToString(AccountInfoDouble(ACCOUNT_BALANCE), 2) + "\n" +
                "üöÄ VPS –†–ï–ñ–ò–ú: –ê–ö–¢–ò–í–ï–ù\n" +
                "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê");
    } else {
        Print("üö´ –†–æ–±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –ü–†–û–°–ú–û–¢–†–ê (—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)!");
    }
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ - –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø                    |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
    if(maHandle != INVALID_HANDLE) {
        IndicatorRelease(maHandle);
    }
    
    Print("=== VPS –†–û–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù ===");
    Print("–ü—Ä–∏—á–∏–Ω–∞: ", reason);
    Print("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ", connectionErrors);
    Print("üîê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: ", TimeToString(lastLicenseCheck));
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    Comment("‚ùå –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
            "üìä –°–¢–ê–¢–£–°: –û–°–¢–ê–ù–û–í–õ–ï–ù\n" +
            "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
            "üõë –ü–†–ò–ß–ò–ù–ê: " + IntegerToString(reason) + "\n" +
            "üìä –û–®–ò–ë–û–ö: " + IntegerToString(connectionErrors) + "\n" +
            "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: " + (licenseValid ? "–ë–´–õ–ê –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê" : "–ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê"));
}

//+------------------------------------------------------------------+
//| –§—É–Ω–∫—Ü–∏—è —Ç–∏–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ - –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø                       |
//+------------------------------------------------------------------+
void OnTick() {
    //+------------------------------------------------------------------+
    //| üîê –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –õ–ò–¶–ï–ù–ó–ò–Ø                                  |
    //+------------------------------------------------------------------+
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –∫–∞–∂–¥—ã–π —Ç–∏–∫ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
    if(!IsLicenseValid()) {
        return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Å—å OnTick –µ—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    CheckLicensePeriodically();
    
    // –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è —Å—Ç–∞–ª–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π - –≤—ã—Ö–æ–¥–∏–º
    if(tradingBlocked) {
        return;
    }
    
    //+------------------------------------------------------------------+
    //| –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê OnTick (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)                   |
    //+------------------------------------------------------------------+
    
    // –ë–ê–ó–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ñ–î–û–ì–û –¢–ò–ö–ê
    tickCounter++;
    lastTickTime = TimeCurrent();
    
    // –ö–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    if(tickCounter % 10 == 0 || tickCounter <= 5) {
        Print("üìä –¢–ò–ö #", tickCounter, " | –í—Ä–µ–º—è: ", TimeToString(TimeCurrent()), " | –°–µ—Å—Å–∏—è: ", (sessionActive ? "–ê–ö–¢–ò–í–ù–ê" : "–ù–ï–¢"));
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ß–ï–†–ï–ó 5 –°–ï–ö–£–ù–î!
    int secondsFromStart = (int)(TimeCurrent() - robotStartTime);
    if(secondsFromStart >= 5 && !sessionActive && !marketReady) {
        Print("üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö! –ü—Ä–æ—à–ª–æ ", secondsFromStart, " —Å–µ–∫—É–Ω–¥ - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!");
        ForceStartTrading();
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–≤—ã–µ 10 —Å–µ–∫—É–Ω–¥
    if(secondsFromStart <= 10 && secondsFromStart != 0) {
        static int lastSecond = 0;
        if(secondsFromStart != lastSecond) {
            Print("‚è∞ –ü—Ä–æ—à–ª–æ ", secondsFromStart, " —Å–µ–∫ | –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ", (marketReady ? "–î–ê" : "–ù–ï–¢"), " | –°–µ—Å—Å–∏—è: ", (sessionActive ? "–î–ê" : "–ù–ï–¢"));
            lastSecond = secondsFromStart;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    if(!TerminalInfoInteger(TERMINAL_CONNECTED)) {
        connectionErrors++;
        Print("‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–û—à–∏–±–∫–∞ #", connectionErrors, ")");
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ –¥–ª—è VPS
    if(!CheckMarketReadiness()) {
        return;
    }
    
    // –ü–µ—á–∞—Ç—å –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–æ—Ç–æ–≤
    static bool wasReady = false;
    if(marketReady && !wasReady) {
        Print("üéâ –†—ã–Ω–æ–∫ –≥–æ—Ç–æ–≤! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–µ...");
        Comment("‚úÖ –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
                "üìä –°–¢–ê–¢–£–°: –†–´–ù–û–ö –ì–û–¢–û–í!\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
                "üéØ –°–ï–°–°–ò–Ø: " + (sessionActive ? "–ê–ö–¢–ò–í–ù–ê" : "–û–ñ–ò–î–ê–ù–ò–ï") + "\n" +
                "üî¢ –¢–ò–ö–û–í: " + IntegerToString(tickCounter) + "\n" +
                "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê");
        wasReady = true;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
    UpdatePositionsInfo();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
    CheckTradingConditions();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Take Profit
    CheckGlobalTakeProfit();
    
    // VPS-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    CheckVPSAutoStart();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∫–∞–∂–¥—ã–µ 50 —Ç–∏–∫–æ–≤ + –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    if(tickCounter % 50 == 0) {
        string status = sessionActive ? "–¢–û–†–ì–£–ï–¢" : (marketReady ? "–û–ñ–ò–î–ê–ù–ò–ï" : "–ü–û–î–ì–û–¢–û–í–ö–ê");
        
        // –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤
        int ourPositions = 0;
        int ourOrders = 0;
        int buyStops = 0;
        int sellStops = 0;
        
        for(int i = 0; i < PositionsTotal(); i++) {
            if(position.SelectByIndex(i)) {
                if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                    ourPositions++;
                }
            }
        }
        
        for(int i = 0; i < OrdersTotal(); i++) {
            if(order.SelectByIndex(i)) {
                if(order.Symbol() == tradingSymbol && order.Magic() == MagicNumber) {
                    ourOrders++;
                    if(order.OrderType() == ORDER_TYPE_BUY_STOP) buyStops++;
                    if(order.OrderType() == ORDER_TYPE_SELL_STOP) sellStops++;
                }
            }
        }
        
        Comment("ü§ñ –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
                "üìä –°–¢–ê–¢–£–°: " + status + "\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
                "üî¢ –¢–ò–ö–û–í: " + IntegerToString(tickCounter) + "\n" +
                "üíµ –ë–ê–õ–ê–ù–°: $" + DoubleToString(AccountInfoDouble(ACCOUNT_BALANCE), 2) + "\n" +
                "üìä –ü–û–ó–ò–¶–ò–ò: " + IntegerToString(ourPositions) + " | –û–†–î–ï–†–ê: " + IntegerToString(ourOrders) + "\n" +
                "üî• –£–î–í–û–ï–ù–ò–ô: " + IntegerToString(doublingCount) + "/" + IntegerToString(MaxDoubling) + "\n" +
                "üéØ BUY_STOP: " + IntegerToString(buyStops) + " | SELL_STOP: " + IntegerToString(sellStops) + "\n" +
                "üì¶ –í –ú–ê–°–°–ò–í–ï: " + IntegerToString(ArraySize(positions)) + "\n" +
                "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –ê–ö–¢–ò–í–ù–ê | ‚úÖ –ü–†–û–í–ï–†–ï–ù–ê");
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if(tickCounter % 200 == 0 && sessionActive) {
            Print("üîç === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê (–¢–ò–ö ", tickCounter, ") ===");
            Print("üîç sessionActive=", sessionActive);
            Print("üîç doublingCount=", doublingCount);
            Print("üîç currentLot=", DoubleToString(currentLot, 3));
            Print("üîç –ü–æ–∑–∏—Ü–∏–π –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ=", ourPositions);
            Print("üîç –û—Ä–¥–µ—Ä–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ=", ourOrders);
            Print("üîç –ü–æ–∑–∏—Ü–∏–π –≤ –º–∞—Å—Å–∏–≤–µ=", ArraySize(positions));
            Print("üîç Buy Stops=", buyStops, " | Sell Stops=", sellStops);
            Print("üîê –õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞=", licenseValid);
            Print("üîê –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞=", tradingBlocked);
            
            if(ourPositions > 1 && ourOrders == 0) {
                Print("üö® –ü–†–û–ë–õ–ï–ú–ê: –ú–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π –Ω–æ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤!");
                Print("üö® –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π!");
            }
        }
    }
}

//+------------------------------------------------------------------+
//| –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô                   |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ê–í–ê–†–ò–ô–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø             |
//+------------------------------------------------------------------+
void ForceStartTrading() {
    Print("üö®üö®üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–õ–ò! üö®üö®üö®");
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    Comment("üö® –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
            "üìä –°–¢–ê–¢–£–°: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö!\n" +
            "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
            "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
            "üö® –†–ï–ñ–ò–ú: –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–¢–ê–†–¢\n" +
            "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –ü–†–û–í–ï–†–ï–ù–ê");
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∏–º —Ä—ã–Ω–æ–∫
    marketReady = true;
    robotStarted = true;
    
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
    double bid = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
    double ask = SymbolInfoDouble(tradingSymbol, SYMBOL_ASK);
    
    Print("üí∞ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: Bid=", DoubleToString(bid, Digits()), " Ask=", DoubleToString(ask, Digits()));
    
    if(bid <= 0 || ask <= 0) {
        Print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫! Bid=", bid, " Ask=", ask);
        Print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:");
        Print("   1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É");
        Print("   2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–∞ BTCUSD");
        Print("   3. –†–∞–±–æ—Ç—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞");
        return;
    }
    
    // –ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    long bidLong = (long)bid;
    ENUM_POSITION_TYPE direction = (bidLong % 2 == 0) ? POSITION_TYPE_BUY : POSITION_TYPE_SELL;
    
    Print("üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", (direction == POSITION_TYPE_BUY ? "–ü–û–ö–£–ü–ö–ê" : "–ü–†–û–î–ê–ñ–ê"));
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
    StartNewSessionFast(direction);
}

//+------------------------------------------------------------------+
//| –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞                      |
//+------------------------------------------------------------------+
ENUM_POSITION_TYPE GetQuickTrend() {
    Print("‚ö° –ë–´–°–¢–†–´–ô –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞...");
    
    double currentPrice = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
    
    // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –º–µ—Ç–æ–¥ - –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä–µ —Ü–µ–Ω—ã
    long priceLong = (long)currentPrice;
    long lastDigit = priceLong % 10;
    
    if(lastDigit >= 5) {
        Print("üìà –ë–´–°–¢–†–´–ô –¢–†–ï–ù–î: –ü–û–ö–£–ü–ö–ê (—Ü–∏—Ñ—Ä–∞ ", lastDigit, ")");
        return POSITION_TYPE_BUY;
    } else {
        Print("üìâ –ë–´–°–¢–†–´–ô –¢–†–ï–ù–î: –ü–†–û–î–ê–ñ–ê (—Ü–∏—Ñ—Ä–∞ ", lastDigit, ")");
        return POSITION_TYPE_SELL;
    }
}

//+------------------------------------------------------------------+
//| –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏ - –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò                    |
//+------------------------------------------------------------------+
void StartNewSessionFast(ENUM_POSITION_TYPE startDirection) {
    Print("üöÄüöÄüöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ –°–ï–°–°–ò–ò! üöÄüöÄüöÄ");
    Print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", (startDirection == POSITION_TYPE_BUY ? "–ü–û–ö–£–ü–ö–ê" : "–ü–†–û–î–ê–ñ–ê"));
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    currentLot = InitialLot;
    doublingCount = 0;
    sessionStartPrice = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
    sessionActive = true;
    
    Print("üí∞ –¶–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–∞: ", DoubleToString(sessionStartPrice, Digits()));
    
    // –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
    if(startDirection == POSITION_TYPE_BUY) {
        sessionBuyLevel = sessionStartPrice;
        sessionSellLevel = sessionBuyLevel - BuyStopPips * Point();
    } else {
        sessionSellLevel = sessionStartPrice;
        sessionBuyLevel = sessionSellLevel + BuyStopPips * Point();
    }
    
    sessionTP = sessionBuyLevel + TakeProfitPips * Point();
    sessionSL = sessionSellLevel - TakeProfitPips * Point();
    
    Print("üìç –ë–´–°–¢–†–´–ï —É—Ä–æ–≤–Ω–∏:");
    Print("   SELL: ", DoubleToString(sessionSellLevel, Digits()));
    Print("   BUY: ", DoubleToString(sessionBuyLevel, Digits()));
    Print("   TP: ", DoubleToString(sessionTP, Digits()));
    Print("   SL: ", DoubleToString(sessionSL, Digits()));
    
    ArrayResize(positions, 0);
    
    // –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    bool success = false;
    if(startDirection == POSITION_TYPE_BUY) {
        success = OpenBuyPositionFast();
    } else {
        success = OpenSellPositionFast();
    }
    
    if(success) {
        Print("‚úÖ‚úÖ‚úÖ –°–ï–°–°–ò–Ø –ó–ê–ü–£–©–ï–ù–ê –£–°–ü–ï–®–ù–û! ‚úÖ‚úÖ‚úÖ");
        Comment("üöÄ –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
                "üìä –°–¢–ê–¢–£–°: –°–ï–°–°–ò–Ø –ê–ö–¢–ò–í–ù–ê!\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
                "üéØ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: " + (startDirection == POSITION_TYPE_BUY ? "–ü–û–ö–£–ü–ö–ê" : "–ü–†–û–î–ê–ñ–ê") + "\n" +
                "üíµ –õ–û–¢: " + DoubleToString(currentLot, 3) + "\n" +
                "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –ê–ö–¢–ò–í–ù–ê");
    } else {
        Print("‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–°–°–ò–ò! ‚ùå‚ùå‚ùå");
        Comment("‚ùå –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
                "üìä –°–¢–ê–¢–£–°: –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê!\n" +
                "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
                "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
                "üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é\n" +
                "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –ê–ö–¢–ò–í–ù–ê");
        sessionActive = false;
    }
}

//+------------------------------------------------------------------+
//| –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ BUY –ø–æ–∑–∏—Ü–∏–∏                                   |
//+------------------------------------------------------------------+
bool OpenBuyPositionFast() {
    Print("üí∞ –ë–´–°–¢–†–û–ï –æ—Ç–∫—Ä—ã—Ç–∏–µ BUY –ø–æ–∑–∏—Ü–∏–∏...");
    
    double ask = SymbolInfoDouble(tradingSymbol, SYMBOL_ASK);
    
    Print("üí± ASK —Ü–µ–Ω–∞: ", DoubleToString(ask, Digits()));
    Print("üí± –õ–æ—Ç: ", DoubleToString(currentLot, 3));
    Print("üí± SL: ", DoubleToString(sessionSL, Digits()));
    Print("üí± TP: ", DoubleToString(sessionTP, Digits()));
    
    if(trade.Buy(currentLot, tradingSymbol, ask, sessionSL, sessionTP, CommentPrefix + "_FASTBUY_0")) {
        Print("‚úÖ –ë–´–°–¢–†–ê–Ø BUY –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!");
        
        // –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Sell Stop
        double nextLot = currentLot * 2;
        if(trade.SellStop(nextLot, sessionSellLevel, tradingSymbol, sessionTP, sessionSL, ORDER_TIME_GTC, 0, CommentPrefix + "_SELLSTOP_1")) {
            Print("‚úÖ Sell Stop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", DoubleToString(nextLot, 3), " –ª–æ—Ç");
        } else {
            Print("‚ö†Ô∏è Sell Stop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", trade.ResultRetcode());
        }
        
        return true;
    } else {
        Print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è BUY: ", trade.ResultRetcode());
        return false;
    }
}

//+------------------------------------------------------------------+
//| –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ SELL –ø–æ–∑–∏—Ü–∏–∏                                  |
//+------------------------------------------------------------------+
bool OpenSellPositionFast() {
    Print("üí∞ –ë–´–°–¢–†–û–ï –æ—Ç–∫—Ä—ã—Ç–∏–µ SELL –ø–æ–∑–∏—Ü–∏–∏...");
    
    double bid = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
    
    Print("üí± BID —Ü–µ–Ω–∞: ", DoubleToString(bid, Digits()));
    Print("üí± –õ–æ—Ç: ", DoubleToString(currentLot, 3));
    Print("üí± SL: ", DoubleToString(sessionTP, Digits()));
    Print("üí± TP: ", DoubleToString(sessionSL, Digits()));
    
    if(trade.Sell(currentLot, tradingSymbol, bid, sessionTP, sessionSL, CommentPrefix + "_FASTSELL_0")) {
        Print("‚úÖ –ë–´–°–¢–†–ê–Ø SELL –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!");
        
        // –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Buy Stop
        double nextLot = currentLot * 2;
        if(trade.BuyStop(nextLot, sessionBuyLevel, tradingSymbol, sessionSL, sessionTP, ORDER_TIME_GTC, 0, CommentPrefix + "_BUYSTOP_1")) {
            Print("‚úÖ Buy Stop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", DoubleToString(nextLot, 3), " –ª–æ—Ç");
        } else {
            Print("‚ö†Ô∏è Buy Stop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", trade.ResultRetcode());
        }
        
        return true;
    } else {
        Print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SELL: ", trade.ResultRetcode());
        return false;
    }
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ –¥–ª—è VPS –æ–ø–µ—Ä–∞—Ü–∏–π - –ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø    |
//+------------------------------------------------------------------+
bool CheckMarketReadiness() {
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ß–ï–†–ï–ó 5 –°–ï–ö–£–ù–î!
    if(TimeCurrent() - robotStartTime >= 5) {
        if(!marketReady) {
            Print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö! 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é!");
            marketReady = true;
        }
        return true;
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    if(tickCounter < MinTicksForStart) {
        return false;
    }
    
    // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
    double bid = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
    double ask = SymbolInfoDouble(tradingSymbol, SYMBOL_ASK);
    
    if(bid > 0 && ask > 0 && ask > bid) {
        if(!marketReady) {
            double spread = (ask - bid) / Point();
            Print("‚úÖ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢! Bid=", DoubleToString(bid, Digits()), " Ask=", DoubleToString(ask, Digits()), " –°–ø—Ä–µ–¥=", DoubleToString(spread, 1));
            marketReady = true;
        }
        return true;
    }
    
    return false;
}

//+------------------------------------------------------------------+
//| VPS-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ - –ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø     |
//+------------------------------------------------------------------+
void CheckVPSAutoStart() {
    // –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê - –º–∏–Ω–∏–º—É–º —É—Å–ª–æ–≤–∏–π
    if(!marketReady || sessionActive) return;
    
    // –ë—ã—Å—Ç—Ä–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–æ–±–æ—Ç–∞
    if(!robotStarted) {
        robotStarted = true;
        lastSessionEnd = TimeCurrent() - DelayBetweenSessions;
        Print("üöÄ –ë–´–°–¢–†–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø! –†–æ–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!");
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    if(TimeCurrent() - lastSessionEnd < DelayBetweenSessions) return;
    
    Print("üéØ –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê...");
    
    // –ü—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    ENUM_POSITION_TYPE trendDirection = GetQuickTrend();
    
    Print("üöÄ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –°–¢–ê–†–¢! –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", (trendDirection == POSITION_TYPE_BUY ? "–ü–û–ö–£–ü–ö–ê" : "–ü–†–û–î–ê–ñ–ê"));
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
    StartNewSessionFast(trendDirection);
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π                                       |
//+------------------------------------------------------------------+
void CheckTradingConditions() {
    if(!sessionActive || !marketReady) return;
    
    CheckExecutedOrders();
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤                                   |
//+------------------------------------------------------------------+
void CheckExecutedOrders() {
    static int lastPositionCount = -1;
    static int lastOrderCount = -1;
    int currentPositionCount = 0;
    int currentOrderCount = 0;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞
    for(int i = 0; i < PositionsTotal(); i++) {
        if(position.SelectByIndex(i)) {
            if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                currentPositionCount++;
            }
        }
    }
    
    for(int i = 0; i < OrdersTotal(); i++) {
        if(order.SelectByIndex(i)) {
            if(order.Symbol() == tradingSymbol && order.Magic() == MagicNumber) {
                currentOrderCount++;
            }
        }
    }
    
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    if(lastPositionCount != -1 && (currentPositionCount != lastPositionCount || currentOrderCount != lastOrderCount)) {
        Print("üîÑ === –ò–ó–ú–ï–ù–ï–ù–ò–ï –í –¢–ï–†–ú–ò–ù–ê–õ–ï ===");
        Print("üîÑ –ü–æ–∑–∏—Ü–∏–∏: –ë—ã–ª–æ=", lastPositionCount, " –°—Ç–∞–ª–æ=", currentPositionCount);
        Print("üîÑ –û—Ä–¥–µ—Ä–∞: –ë—ã–ª–æ=", lastOrderCount, " –°—Ç–∞–ª–æ=", currentOrderCount);
        Print("üîÑ –ü–æ–∑–∏—Ü–∏–π –≤ –Ω–∞—à–µ–º –º–∞—Å—Å–∏–≤–µ: ", ArraySize(positions));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏
        Print("üîÑ === –í–°–ï –ù–ê–®–ò –ü–û–ó–ò–¶–ò–ò –í –¢–ï–†–ú–ò–ù–ê–õ–ï ===");
        for(int i = 0; i < PositionsTotal(); i++) {
            if(position.SelectByIndex(i)) {
                if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                    Print("üîÑ –ü–æ–∑–∏—Ü–∏—è: ", position.Ticket(), 
                          " | ", (position.PositionType() == POSITION_TYPE_BUY ? "BUY" : "SELL"),
                          " | ", DoubleToString(position.Volume(), 3),
                          " | ", DoubleToString(position.PriceOpen(), Digits()));
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ –æ—Ä–¥–µ—Ä–∞
        Print("üîÑ === –í–°–ï –ù–ê–®–ò –û–†–î–ï–†–ê –í –¢–ï–†–ú–ò–ù–ê–õ–ï ===");
        for(int i = 0; i < OrdersTotal(); i++) {
            if(order.SelectByIndex(i)) {
                if(order.Symbol() == tradingSymbol && order.Magic() == MagicNumber) {
                    Print("üîÑ –û—Ä–¥–µ—Ä: ", order.Ticket(), 
                          " | ", (order.OrderType() == ORDER_TYPE_BUY_STOP ? "BUY_STOP" : 
                                 order.OrderType() == ORDER_TYPE_SELL_STOP ? "SELL_STOP" : "–î–†–£–ì–û–ô"),
                          " | ", DoubleToString(order.VolumeCurrent(), 3),
                          " | ", DoubleToString(order.PriceOpen(), Digits()));
                }
            }
        }
    }
    
    lastPositionCount = currentPositionCount;
    lastOrderCount = currentOrderCount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    for(int i = 0; i < PositionsTotal(); i++) {
        if(position.SelectByIndex(i)) {
            if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                bool found = false;
                for(int j = 0; j < ArraySize(positions); j++) {
                    if(positions[j].ticket == position.Ticket()) {
                        found = true;
                        break;
                    }
                }
                
                if(!found) {
                    Print("üÜï === –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ù–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø! ===");
                    Print("üÜï Ticket: ", position.Ticket());
                    Print("üÜï –¢–∏–ø: ", (position.PositionType() == POSITION_TYPE_BUY ? "BUY" : "SELL"));
                    Print("üÜï –õ–æ—Ç: ", DoubleToString(position.Volume(), 3));
                    Print("üÜï –¶–µ–Ω–∞: ", DoubleToString(position.PriceOpen(), Digits()));
                    Print("üÜï –í—Ä–µ–º—è: ", TimeToString(position.Time()));
                    Print("üÜï –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏: ", ArraySize(positions));
                    
                    ProcessNewPositionSafe();
                    
                    Print("üÜï –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏: ", ArraySize(positions));
                    Print("üÜï === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ù–û–í–û–ô –ü–û–ó–ò–¶–ò–ò ===");
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å VPS –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é                    |
//+------------------------------------------------------------------+
void ProcessNewPositionSafe() {
    Print("üÜï ============ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–ô –ü–û–ó–ò–¶–ò–ò ============");
    Print("üÜï –¢–∏–ø: ", (position.PositionType() == POSITION_TYPE_BUY ? "–ü–û–ö–£–ü–ö–ê" : "–ü–†–û–î–ê–ñ–ê"));
    Print("üÜï –õ–æ—Ç: ", DoubleToString(position.Volume(), 3));
    Print("üÜï –¶–µ–Ω–∞: ", DoubleToString(position.PriceOpen(), Digits()));
    Print("üÜï Ticket: ", position.Ticket());
    Print("üÜï –í—Ä–µ–º—è: ", TimeToString(position.Time()));
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–°–°–ò–í–ê –ü–û–ó–ò–¶–ò–ô
    Print("üîç === –°–û–°–¢–û–Ø–ù–ò–ï –ú–ê–°–°–ò–í–ê –ü–û–ó–ò–¶–ò–ô –î–û ===");
    Print("üîç –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: ", ArraySize(positions));
    for(int k = 0; k < ArraySize(positions); k++) {
        Print("üîç –ü–æ–∑–∏—Ü–∏—è #", k, ": Ticket=", positions[k].ticket, " | –¢–∏–ø=", positions[k].type, " | –õ–æ—Ç=", DoubleToString(positions[k].lots, 3));
    }
    
    bool isFirstPosition = (ArraySize(positions) == 0);
    
    Print("üîç === –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ===");
    Print("üîç isFirstPosition=", isFirstPosition);
    Print("üîç doublingCount –î–û=", doublingCount);
    Print("üîç currentLot –î–û=", DoubleToString(currentLot, 3));
    Print("üîç sessionActive=", sessionActive);
    
    // –õ–û–ì–ò–ö–ê –î–õ–Ø BUY –ü–û–ó–ò–¶–ò–ô
    if(position.PositionType() == POSITION_TYPE_BUY) {
        Print("üìà === –û–ë–†–ê–ë–û–¢–ö–ê BUY –ü–û–ó–ò–¶–ò–ò ===");
        
        if(!isFirstPosition) {
            Print("üî• –≠–¢–û –ù–ï –ü–ï–†–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø! –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏...");
            doublingCount++;
            currentLot = InitialLot * MathPow(2, doublingCount);
            Print("üî• –ù–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø: doublingCount=", doublingCount, " | currentLot=", DoubleToString(currentLot, 3));
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í
            Print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤: doublingCount=", doublingCount, " | MaxDoubling=", MaxDoubling);
            Print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ—Ç–∞: currentLot=", DoubleToString(currentLot, 3), " | MaxLotSize=", DoubleToString(MaxLotSize, 3));
            
        } else {
            Print("üìù –≠–¢–û –ü–ï–†–í–ê–Ø BUY –ü–û–ó–ò–¶–ò–Ø –í –°–ï–°–°–ò–ò");
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP/SL —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        Print("üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP/SL –¥–ª—è BUY...");
        bool tpslResult = ModifyPositionSafe(position.Ticket(), sessionSL, sessionTP);
        Print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç TP/SL: ", (tpslResult ? "–£–°–ü–ï–•" : "–û–®–ò–ë–ö–ê"));
        
        if(!isFirstPosition) {
            Print("üöÄ === –ü–û–ü–´–¢–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –°–õ–ï–î–£–Æ–©–ï–ì–û SELL STOP ===");
            Print("üöÄ –¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ —Å–µ—Å—Å–∏–∏:");
            Print("üöÄ sessionSellLevel=", DoubleToString(sessionSellLevel, Digits()));
            Print("üöÄ sessionBuyLevel=", DoubleToString(sessionBuyLevel, Digits()));
            Print("üöÄ sessionTP=", DoubleToString(sessionTP, Digits()));
            Print("üöÄ sessionSL=", DoubleToString(sessionSL, Digits()));
            
            SetupNextSellStopSafe();
        } else {
            Print("‚ÑπÔ∏è –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - —Å—Ç–æ–ø —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏");
        }
        
    // –õ–û–ì–ò–ö–ê –î–õ–Ø SELL –ü–û–ó–ò–¶–ò–ô  
    } else if(position.PositionType() == POSITION_TYPE_SELL) {
        Print("üìâ === –û–ë–†–ê–ë–û–¢–ö–ê SELL –ü–û–ó–ò–¶–ò–ò ===");
        
        if(!isFirstPosition) {
            Print("üî• –≠–¢–û –ù–ï –ü–ï–†–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø! –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏...");
            doublingCount++;
            currentLot = InitialLot * MathPow(2, doublingCount);
            Print("üî• –ù–û–í–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø: doublingCount=", doublingCount, " | currentLot=", DoubleToString(currentLot, 3));
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í
            Print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤: doublingCount=", doublingCount, " | MaxDoubling=", MaxDoubling);
            Print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ—Ç–∞: currentLot=", DoubleToString(currentLot, 3), " | MaxLotSize=", DoubleToString(MaxLotSize, 3));
            
        } else {
            Print("üìù –≠–¢–û –ü–ï–†–í–ê–Ø SELL –ü–û–ó–ò–¶–ò–Ø –í –°–ï–°–°–ò–ò");
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP/SL —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        Print("üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP/SL –¥–ª—è SELL...");
        bool tpslResult = ModifyPositionSafe(position.Ticket(), sessionTP, sessionSL);
        Print("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç TP/SL: ", (tpslResult ? "–£–°–ü–ï–•" : "–û–®–ò–ë–ö–ê"));
        
        if(!isFirstPosition) {
            Print("üöÄ === –ü–û–ü–´–¢–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –°–õ–ï–î–£–Æ–©–ï–ì–û BUY STOP ===");
            Print("üöÄ –¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ —Å–µ—Å—Å–∏–∏:");
            Print("üöÄ sessionSellLevel=", DoubleToString(sessionSellLevel, Digits()));
            Print("üöÄ sessionBuyLevel=", DoubleToString(sessionBuyLevel, Digits()));
            Print("üöÄ sessionTP=", DoubleToString(sessionTP, Digits()));
            Print("üöÄ sessionSL=", DoubleToString(sessionSL, Digits()));
            
            SetupNextBuyStopSafe();
        } else {
            Print("‚ÑπÔ∏è –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - —Å—Ç–æ–ø —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏");
        }
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ú–ê–°–°–ò–í (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢!)
    Print("üìä === –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ú–ê–°–°–ò–í ===");
    Print("üìä –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ", ArraySize(positions));
    AddPositionToArray();
    Print("üìä –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ", ArraySize(positions));
    
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    Print("üîç === –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò ===");
    Print("üîç doublingCount=", doublingCount);
    Print("üîç currentLot=", DoubleToString(currentLot, 3));
    Print("üîç –ü–æ–∑–∏—Ü–∏–π –≤ –º–∞—Å—Å–∏–≤–µ=", ArraySize(positions));
    
    // –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –û–†–î–ï–†–û–í –í –¢–ï–†–ú–ò–ù–ê–õ–ï
    Print("üìã === –¢–ï–ö–£–©–ò–ï –û–†–î–ï–†–ê –í –¢–ï–†–ú–ò–ù–ê–õ–ï ===");
    int totalOrders = OrdersTotal();
    int ourOrders = 0;
    
    for(int i = 0; i < totalOrders; i++) {
        if(order.SelectByIndex(i)) {
            if(order.Symbol() == tradingSymbol && order.Magic() == MagicNumber) {
                ourOrders++;
                Print("üìã –û—Ä–¥–µ—Ä #", ourOrders, ": ", 
                      (order.OrderType() == ORDER_TYPE_BUY_STOP ? "BUY_STOP" : 
                       order.OrderType() == ORDER_TYPE_SELL_STOP ? "SELL_STOP" : "–î–†–£–ì–û–ô"),
                      " | –õ–æ—Ç: ", DoubleToString(order.VolumeCurrent(), 3),
                      " | –¶–µ–Ω–∞: ", DoubleToString(order.PriceOpen(), Digits()),
                      " | Ticket: ", order.Ticket());
            }
        }
    }
    
    Print("üìã –í—Å–µ–≥–æ –Ω–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: ", ourOrders, " –∏–∑ ", totalOrders);
    Print("üÜï ============ –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–ó–ò–¶–ò–ò ============");
}

//+------------------------------------------------------------------+
//| –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏                                   |
//+------------------------------------------------------------------+
bool ModifyPositionSafe(ulong ticket, double sl, double tp) {
    for(int retry = 0; retry < MaxRetries; retry++) {
        if(trade.PositionModify(ticket, sl, tp)) {
            Print("‚úÖ VPS –ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: TP=", DoubleToString(tp, Digits()), " SL=", DoubleToString(sl, Digits()));
            return true;
        } else {
            Print("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ø—ã—Ç–∫–∞ ", retry + 1, " –Ω–µ—É–¥–∞—á–Ω–∞: ", trade.ResultRetcode());
            if(retry < MaxRetries - 1) Sleep(RetryDelay);
        }
    }
    return false;
}

//+------------------------------------------------------------------+
//| –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ Buy Stop                       |
//+------------------------------------------------------------------+
void SetupNextBuyStopSafe() {
    Print("üîç ==================== –£–°–¢–ê–ù–û–í–ö–ê BUY STOP ====================");
    Print("üîç –í–•–û–î–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:");
    Print("üîç   doublingCount=", doublingCount);
    Print("üîç   MaxDoubling=", MaxDoubling);
    Print("üîç   currentLot=", DoubleToString(currentLot, 3));
    Print("üîç   sessionActive=", sessionActive);
    
    // –ü–†–û–í–ï–†–ö–ê 1: –õ–∏–º–∏—Ç —É–¥–≤–æ–µ–Ω–∏–π
    if(doublingCount >= MaxDoubling) {
        Print("‚ùå –°–¢–û–ü: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π (", doublingCount, "/", MaxDoubling, ")");
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 2: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
    Print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Buy Stop –æ—Ä–¥–µ—Ä–æ–≤...");
    bool orderExists = CheckOrderExists(ORDER_TYPE_BUY_STOP);
    Print("üîç Buy Stop —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ", (orderExists ? "–î–ê" : "–ù–ï–¢"));
    
    if(orderExists) {
        Print("‚ö†Ô∏è –°–¢–û–ü: Buy Stop —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 3: –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π —Å–µ—Å—Å–∏–∏
    Print("üîç –ü–†–û–í–ï–†–ö–ê –£–†–û–í–ù–ï–ô –°–ï–°–°–ò–ò:");
    Print("üîç   sessionBuyLevel=", DoubleToString(sessionBuyLevel, Digits()));
    Print("üîç   sessionSellLevel=", DoubleToString(sessionSellLevel, Digits()));
    Print("üîç   sessionTP=", DoubleToString(sessionTP, Digits()));
    Print("üîç   sessionSL=", DoubleToString(sessionSL, Digits()));
    
    if(sessionBuyLevel <= 0 || sessionSL <= 0 || sessionTP <= 0) {
        Print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–µ—Å—Å–∏–∏!");
        Print("‚ùå   sessionBuyLevel=", sessionBuyLevel);
        Print("‚ùå   sessionSL=", sessionSL);
        Print("‚ùå   sessionTP=", sessionTP);
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 4: –†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ—Ç–∞
    double nextLot = currentLot * 2;
    double limitedLot = MathMin(nextLot, MaxLotSize);
    
    Print("üîç –†–ê–°–ß–ï–¢ –õ–û–¢–ê:");
    Print("üîç   currentLot * 2 = ", DoubleToString(nextLot, 3));
    Print("üîç   MaxLotSize = ", DoubleToString(MaxLotSize, 3));
    Print("üîç   –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ—Ç = ", DoubleToString(limitedLot, 3));
    
    if(limitedLot != nextLot) {
        Print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –º–∞–∫—Å–∏–º—É–º–æ–º (", DoubleToString(nextLot, 3), " ‚Üí ", DoubleToString(limitedLot, 3), ")");
    }
    
    // –ü–†–û–í–ï–†–ö–ê 5: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—Ä–æ–∫–µ—Ä–∞
    double minLot = SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_MIN);
    double maxLot = SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_MAX);
    double stepLot = SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_STEP);
    
    Print("üîç –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ë–†–û–ö–ï–†–ê:");
    Print("üîç   Min Lot: ", DoubleToString(minLot, 3));
    Print("üîç   Max Lot: ", DoubleToString(maxLot, 3));
    Print("üîç   Step Lot: ", DoubleToString(stepLot, 3));
    
    if(limitedLot < minLot || limitedLot > maxLot) {
        Print("‚ùå –û–®–ò–ë–ö–ê: –õ–æ—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!");
        return;
    }
    
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –£–°–¢–ê–ù–û–í–ö–ò
    Print("üöÄ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Buy Stop...");
    Print("üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:");
    Print("üöÄ   –õ–æ—Ç: ", DoubleToString(limitedLot, 3));
    Print("üöÄ   –¶–µ–Ω–∞: ", DoubleToString(sessionBuyLevel, Digits()));
    Print("üöÄ   SL: ", DoubleToString(sessionSL, Digits()));
    Print("üöÄ   TP: ", DoubleToString(sessionTP, Digits()));
    
    bool result = SetBuyStopSafe(limitedLot);
    
    Print("üöÄ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–°–¢–ê–ù–û–í–ö–ò BUY STOP: ", (result ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –ù–ï–£–î–ê–ß–ê"));
    Print("üîç ==================== –ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò BUY STOP ====================");
}

//+------------------------------------------------------------------+
//| –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ Sell Stop                      |
//+------------------------------------------------------------------+
void SetupNextSellStopSafe() {
    Print("üîç ==================== –£–°–¢–ê–ù–û–í–ö–ê SELL STOP ====================");
    Print("üîç –í–•–û–î–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:");
    Print("üîç   doublingCount=", doublingCount);
    Print("üîç   MaxDoubling=", MaxDoubling);
    Print("üîç   currentLot=", DoubleToString(currentLot, 3));
    Print("üîç   sessionActive=", sessionActive);
    
    // –ü–†–û–í–ï–†–ö–ê 1: –õ–∏–º–∏—Ç —É–¥–≤–æ–µ–Ω–∏–π
    if(doublingCount >= MaxDoubling) {
        Print("‚ùå –°–¢–û–ü: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π (", doublingCount, "/", MaxDoubling, ")");
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 2: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
    Print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Sell Stop –æ—Ä–¥–µ—Ä–æ–≤...");
    bool orderExists = CheckOrderExists(ORDER_TYPE_SELL_STOP);
    Print("üîç Sell Stop —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ", (orderExists ? "–î–ê" : "–ù–ï–¢"));
    
    if(orderExists) {
        Print("‚ö†Ô∏è –°–¢–û–ü: Sell Stop —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 3: –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π —Å–µ—Å—Å–∏–∏
    Print("üîç –ü–†–û–í–ï–†–ö–ê –£–†–û–í–ù–ï–ô –°–ï–°–°–ò–ò:");
    Print("üîç   sessionSellLevel=", DoubleToString(sessionSellLevel, Digits()));
    Print("üîç   sessionBuyLevel=", DoubleToString(sessionBuyLevel, Digits()));
    Print("üîç   sessionTP=", DoubleToString(sessionTP, Digits()));
    Print("üîç   sessionSL=", DoubleToString(sessionSL, Digits()));
    
    if(sessionSellLevel <= 0 || sessionSL <= 0 || sessionTP <= 0) {
        Print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–µ—Å—Å–∏–∏!");
        Print("‚ùå   sessionSellLevel=", sessionSellLevel);
        Print("‚ùå   sessionSL=", sessionSL);
        Print("‚ùå   sessionTP=", sessionTP);
        return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 4: –†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ—Ç–∞
    double nextLot = currentLot * 2;
    double limitedLot = MathMin(nextLot, MaxLotSize);
    
    Print("üîç –†–ê–°–ß–ï–¢ –õ–û–¢–ê:");
    Print("üîç   currentLot * 2 = ", DoubleToString(nextLot, 3));
    Print("üîç   MaxLotSize = ", DoubleToString(MaxLotSize, 3));
    Print("üîç   –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ—Ç = ", DoubleToString(limitedLot, 3));
    
    if(limitedLot != nextLot) {
        Print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –º–∞–∫—Å–∏–º—É–º–æ–º (", DoubleToString(nextLot, 3), " ‚Üí ", DoubleToString(limitedLot, 3), ")");
    }
    
    // –ü–†–û–í–ï–†–ö–ê 5: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—Ä–æ–∫–µ—Ä–∞
    double minLot = SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_MIN);
    double maxLot = SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_MAX);
    double stepLot = SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_STEP);
    
    Print("üîç –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ë–†–û–ö–ï–†–ê:");
    Print("üîç   Min Lot: ", DoubleToString(minLot, 3));
    Print("üîç   Max Lot: ", DoubleToString(maxLot, 3));
    Print("üîç   Step Lot: ", DoubleToString(stepLot, 3));
    
    if(limitedLot < minLot || limitedLot > maxLot) {
        Print("‚ùå –û–®–ò–ë–ö–ê: –õ–æ—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!");
        return;
    }
    
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –£–°–¢–ê–ù–û–í–ö–ò
    Print("üöÄ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sell Stop...");
    Print("üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:");
    Print("üöÄ   –õ–æ—Ç: ", DoubleToString(limitedLot, 3));
    Print("üöÄ   –¶–µ–Ω–∞: ", DoubleToString(sessionSellLevel, Digits()));
    Print("üöÄ   SL: ", DoubleToString(sessionTP, Digits()));
    Print("üöÄ   TP: ", DoubleToString(sessionSL, Digits()));
    
    bool result = SetSellStopSafe(limitedLot);
    
    Print("üöÄ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–°–¢–ê–ù–û–í–ö–ò SELL STOP: ", (result ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –ù–ï–£–î–ê–ß–ê"));
    Print("üîç ==================== –ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò SELL STOP ====================");
}

//+------------------------------------------------------------------+
//| –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Buy Stop                                  |
//+------------------------------------------------------------------+
bool SetBuyStopSafe(double lotSize) {
    Print("üí∞ === –£–°–¢–ê–ù–û–í–ö–ê BUY STOP ===");
    Print("üí∞ –õ–æ—Ç: ", DoubleToString(lotSize, 3));
    Print("üí∞ –¶–µ–Ω–∞: ", DoubleToString(sessionBuyLevel, Digits()));
    Print("üí∞ SL: ", DoubleToString(sessionSL, Digits()));
    Print("üí∞ TP: ", DoubleToString(sessionTP, Digits()));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    double currentPrice = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
    Print("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ", DoubleToString(currentPrice, Digits()));
    
    if(sessionBuyLevel <= currentPrice) {
        Print("‚ùå –û–®–ò–ë–ö–ê: Buy Stop —Ü–µ–Ω–∞ (", DoubleToString(sessionBuyLevel, Digits()), 
              ") –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (", DoubleToString(currentPrice, Digits()), ")");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    double minStopsLevel = SymbolInfoInteger(tradingSymbol, SYMBOL_TRADE_STOPS_LEVEL) * Point();
    double distance = sessionBuyLevel - currentPrice;
    
    Print("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ", DoubleToString(minStopsLevel, Digits()));
    Print("üí∞ –ù–∞—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ", DoubleToString(distance, Digits()));
    
    if(distance < minStopsLevel && minStopsLevel > 0) {
        Print("‚ùå –û–®–ò–ë–ö–ê: –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ", DoubleToString(minStopsLevel, Digits()));
        return false;
    }
    
    for(int retry = 0; retry < MaxRetries; retry++) {
        Print("üí∞ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Buy Stop #", retry + 1);
        
        if(trade.BuyStop(lotSize, sessionBuyLevel, tradingSymbol, sessionSL, sessionTP, ORDER_TIME_GTC, 0, CommentPrefix + "_BUYSTOP_" + IntegerToString(doublingCount + 1))) {
            Print("‚úÖ VPS Buy Stop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –£–°–ü–ï–®–ù–û! –õ–æ—Ç: ", DoubleToString(lotSize, 3));
            Print("‚úÖ Ticket: ", trade.ResultOrder());
            return true;
        } else {
            Print("‚ùå Buy Stop –ø–æ–ø—ã—Ç–∫–∞ ", retry + 1, " –Ω–µ—É–¥–∞—á–Ω–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: ", trade.ResultRetcode());
            Print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: ", trade.ResultRetcodeDescription());
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if(trade.ResultRetcode() == TRADE_RETCODE_INVALID_STOPS) {
                Print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ç–æ–ø—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç—ã TP/SL");
            } else if(trade.ResultRetcode() == TRADE_RETCODE_INVALID_PRICE) {
                Print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞! –¶–µ–Ω–∞ Buy Stop: ", DoubleToString(sessionBuyLevel, Digits()));
            } else if(trade.ResultRetcode() == TRADE_RETCODE_INVALID_VOLUME) {
                Print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º! –õ–æ—Ç: ", DoubleToString(lotSize, 3));
            }
            
            if(retry < MaxRetries - 1) {
                Print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ", RetryDelay, " –º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...");
                Sleep(RetryDelay);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
                currentPrice = SymbolInfoDouble(tradingSymbol, SYMBOL_BID);
            }
        }
    }
    
    Print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Buy Stop –ø–æ—Å–ª–µ ", MaxRetries, " –ø–æ–ø—ã—Ç–æ–∫!");
    return false;
}

//+------------------------------------------------------------------+
//| –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Sell Stop                                 |
//+------------------------------------------------------------------+
bool SetSellStopSafe(double lotSize) {
    Print("üí∞ === –£–°–¢–ê–ù–û–í–ö–ê SELL STOP ===");
    Print("üí∞ –õ–æ—Ç: ", DoubleToString(lotSize, 3));
    Print("üí∞ –¶–µ–Ω–∞: ", DoubleToString(sessionSellLevel, Digits()));
    Print("üí∞ SL: ", DoubleToString(sessionTP, Digits()));
    Print("üí∞ TP: ", DoubleToString(sessionSL, Digits()));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    double currentPrice = SymbolInfoDouble(tradingSymbol, SYMBOL_ASK);
    Print("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ", DoubleToString(currentPrice, Digits()));
    
    if(sessionSellLevel >= currentPrice) {
        Print("‚ùå –û–®–ò–ë–ö–ê: Sell Stop —Ü–µ–Ω–∞ (", DoubleToString(sessionSellLevel, Digits()), 
              ") –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (", DoubleToString(currentPrice, Digits()), ")");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    double minStopsLevel = SymbolInfoInteger(tradingSymbol, SYMBOL_TRADE_STOPS_LEVEL) * Point();
    double distance = currentPrice - sessionSellLevel;
    
    Print("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ", DoubleToString(minStopsLevel, Digits()));
    Print("üí∞ –ù–∞—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ", DoubleToString(distance, Digits()));
    
    if(distance < minStopsLevel && minStopsLevel > 0) {
        Print("‚ùå –û–®–ò–ë–ö–ê: –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ", DoubleToString(minStopsLevel, Digits()));
        return false;
    }
    
    for(int retry = 0; retry < MaxRetries; retry++) {
        Print("üí∞ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sell Stop #", retry + 1);
        
        if(trade.SellStop(lotSize, sessionSellLevel, tradingSymbol, sessionTP, sessionSL, ORDER_TIME_GTC, 0, CommentPrefix + "_SELLSTOP_" + IntegerToString(doublingCount + 1))) {
            Print("‚úÖ VPS Sell Stop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –£–°–ü–ï–®–ù–û! –õ–æ—Ç: ", DoubleToString(lotSize, 3));
            Print("‚úÖ Ticket: ", trade.ResultOrder());
            return true;
        } else {
            Print("‚ùå Sell Stop –ø–æ–ø—ã—Ç–∫–∞ ", retry + 1, " –Ω–µ—É–¥–∞—á–Ω–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: ", trade.ResultRetcode());
            Print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: ", trade.ResultRetcodeDescription());
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if(trade.ResultRetcode() == TRADE_RETCODE_INVALID_STOPS) {
                Print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ç–æ–ø—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç—ã TP/SL");
            } else if(trade.ResultRetcode() == TRADE_RETCODE_INVALID_PRICE) {
                Print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞! –¶–µ–Ω–∞ Sell Stop: ", DoubleToString(sessionSellLevel, Digits()));
            } else if(trade.ResultRetcode() == TRADE_RETCODE_INVALID_VOLUME) {
                Print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º! –õ–æ—Ç: ", DoubleToString(lotSize, 3));
            }
            
            if(retry < MaxRetries - 1) {
                Print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ", RetryDelay, " –º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...");
                Sleep(RetryDelay);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
                currentPrice = SymbolInfoDouble(tradingSymbol, SYMBOL_ASK);
            }
        }
    }
    
    Print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Sell Stop –ø–æ—Å–ª–µ ", MaxRetries, " –ø–æ–ø—ã—Ç–æ–∫!");
    return false;
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Take Profit                               |
//+------------------------------------------------------------------+
void CheckGlobalTakeProfit() {
    if(!sessionActive) return;
    
    double totalProfit = 0;
    int activePositions = 0;
    
    for(int i = 0; i < PositionsTotal(); i++) {
        if(position.SelectByIndex(i)) {
            if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                totalProfit += position.Profit() + position.Swap() + position.Commission();
                activePositions++;
            }
        }
    }
    
    if(activePositions > 1) {
        double targetProfit = TakeProfitPips * pipValue * InitialLot;
        
        if(totalProfit >= targetProfit && ResetAfterTP) {
            Print("üéâ VPS –ì–õ–û–ë–ê–õ–¨–ù–´–ô TP! –ü—Ä–∏–±—ã–ª—å: $", DoubleToString(totalProfit, 2));
            CloseAllPositionsAndOrders();
        }
    }
}

//+------------------------------------------------------------------+
//| –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö                               |
//+------------------------------------------------------------------+
void UpdatePositionsInfo() {
    for(int i = ArraySize(positions) - 1; i >= 0; i--) {
        if(!position.SelectByTicket(positions[i].ticket)) {
            Print("üìà VPS –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: ", positions[i].ticket, " - –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê");
            CloseAllPositionsAndOrders();
            return;
        }
    }
}

//+------------------------------------------------------------------+
//| –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤                                |
//+------------------------------------------------------------------+
void CloseAllPositionsAndOrders() {
    Print("üîÑ VPS –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤...");
    
    for(int i = PositionsTotal() - 1; i >= 0; i--) {
        if(position.SelectByIndex(i)) {
            if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                trade.PositionClose(position.Ticket());
            }
        }
    }
    
    for(int i = OrdersTotal() - 1; i >= 0; i--) {
        if(order.SelectByIndex(i)) {
            if(order.Symbol() == tradingSymbol && order.Magic() == MagicNumber) {
                trade.OrderDelete(order.Ticket());
            }
        }
    }
    
    sessionActive = false;
    lastSessionEnd = TimeCurrent();
    ArrayResize(positions, 0);
    
    Comment("‚úÖ –°–û–í–ï–¢–ù–ò–ö: MartingaleVPS_Enhanced v1.61\n" +
            "üìä –°–¢–ê–¢–£–°: –°–ï–°–°–ò–Ø –ó–ê–ö–†–´–¢–ê\n" +
            "‚è∞ –í–†–ï–ú–Ø: " + TimeToString(TimeCurrent()) + "\n" +
            "üí∞ –°–ò–ú–í–û–õ: " + tradingSymbol + "\n" +
            "üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –ß–ï–†–ï–ó: " + IntegerToString(DelayBetweenSessions) + " —Å–µ–∫\n" +
            "ü§ñ –†–ï–ñ–ò–ú: AUTO\n" +
            "üîê –õ–ò–¶–ï–ù–ó–ò–Ø: –ê–ö–¢–ò–í–ù–ê");
    
    Print("‚úÖ VPS –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞. –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ", DelayBetweenSessions, " —Å–µ–∫—É–Ω–¥");
}

//+------------------------------------------------------------------+
//| –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤                                    |
//+------------------------------------------------------------------+
void AddPositionToArray() {
    Print("üìä === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –í –ú–ê–°–°–ò–í ===");
    
    int size = ArraySize(positions);
    Print("üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: ", size);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
    for(int i = 0; i < size; i++) {
        if(positions[i].ticket == position.Ticket()) {
            Print("‚ö†Ô∏è –ü–û–ó–ò–¶–ò–Ø –£–ñ–ï –í –ú–ê–°–°–ò–í–ï! Ticket: ", position.Ticket(), " –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ", i);
            return;
        }
    }
    
    ArrayResize(positions, size + 1);
    Print("üìä –ú–∞—Å—Å–∏–≤ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ —Ä–∞–∑–º–µ—Ä–∞: ", ArraySize(positions));
    
    positions[size].ticket = position.Ticket();
    positions[size].type = position.PositionType();
    positions[size].lots = position.Volume();
    positions[size].openPrice = position.PriceOpen();
    positions[size].takeProfit = position.TakeProfit();
    positions[size].stopLoss = position.StopLoss();
    positions[size].openTime = position.Time();
    
    Print("üìä –ü–û–ó–ò–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ê:");
    Print("üìä   –ò–Ω–¥–µ–∫—Å: ", size);
    Print("üìä   Ticket: ", positions[size].ticket);
    Print("üìä   –¢–∏–ø: ", (positions[size].type == POSITION_TYPE_BUY ? "BUY" : "SELL"));
    Print("üìä   –õ–æ—Ç: ", DoubleToString(positions[size].lots, 3));
    Print("üìä   –¶–µ–Ω–∞: ", DoubleToString(positions[size].openPrice, Digits()));
    Print("üìä   TP: ", DoubleToString(positions[size].takeProfit, Digits()));
    Print("üìä   SL: ", DoubleToString(positions[size].stopLoss, Digits()));
    Print("üìä   –í—Ä–µ–º—è: ", TimeToString(positions[size].openTime));
    
    Print("üìä === –í–ï–°–¨ –ú–ê–°–°–ò–í –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===");
    for(int j = 0; j < ArraySize(positions); j++) {
        Print("üìä [", j, "] Ticket: ", positions[j].ticket, 
              " | –¢–∏–ø: ", (positions[j].type == POSITION_TYPE_BUY ? "BUY" : "SELL"),
              " | –õ–æ—Ç: ", DoubleToString(positions[j].lots, 3));
    }
    Print("üìä === –ö–û–ù–ï–¶ –ú–ê–°–°–ò–í–ê ===");
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ                      |
//+------------------------------------------------------------------+
void CheckExistingPositions() {
    int posCount = 0;
    
    for(int i = 0; i < PositionsTotal(); i++) {
        if(position.SelectByIndex(i)) {
            if(position.Symbol() == tradingSymbol && position.Magic() == MagicNumber) {
                posCount++;
                sessionActive = true;
                robotStarted = true;
                marketReady = true;
                AddPositionToArray();
            }
        }
    }
    
    if(posCount > 0) {
        Print("üìä VPS –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏: ", posCount, " | –°–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }
}

//+------------------------------------------------------------------+
//| –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞                                  |
//+------------------------------------------------------------------+
bool CheckOrderExists(ENUM_ORDER_TYPE orderType) {
    Print("üîç === –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –û–†–î–ï–†–û–í ===");
    Print("üîç –ò—â–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: ", orderType, " (", 
          (orderType == ORDER_TYPE_BUY_STOP ? "BUY_STOP" : 
           orderType == ORDER_TYPE_SELL_STOP ? "SELL_STOP" : "–î–†–£–ì–û–ô"), ")");
    Print("üîç –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: ", OrdersTotal());
    
    int ourOrders = 0;
    int targetOrders = 0;
    
    for(int i = 0; i < OrdersTotal(); i++) {
        if(order.SelectByIndex(i)) {
            bool isOurSymbol = (order.Symbol() == tradingSymbol);
            bool isOurMagic = (order.Magic() == MagicNumber);
            bool isTargetType = (order.OrderType() == orderType);
            
            if(isOurSymbol && isOurMagic) {
                ourOrders++;
                Print("üîç –ù–∞–π–¥–µ–Ω –Ω–∞—à –æ—Ä–¥–µ—Ä #", i, ": ", 
                      order.OrderType(), " | Ticket: ", order.Ticket(), 
                      " | –õ–æ—Ç: ", DoubleToString(order.VolumeCurrent(), 3),
                      " | –¶–µ–Ω–∞: ", DoubleToString(order.PriceOpen(), Digits()));
                      
                if(isTargetType) {
                    targetOrders++;
                    Print("‚úÖ –ù–ê–ô–î–ï–ù —Ü–µ–ª–µ–≤–æ–π –æ—Ä–¥–µ—Ä! Ticket: ", order.Ticket());
                }
            }
        }
    }
    
    Print("üîç –ù–∞—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤—Å–µ–≥–æ: ", ourOrders);
    Print("üîç –¶–µ–ª–µ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ", targetOrders);
    Print("üîç === –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –û–†–î–ï–†–û–í ===");
    
    return (targetOrders > 0);
}

//+------------------------------------------------------------------+
//| –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—É–Ω–∫—Ç–∞                                        |
//+------------------------------------------------------------------+
void CalculatePipValue() {
    pipValue = SymbolInfoDouble(tradingSymbol, SYMBOL_TRADE_TICK_VALUE);
    Print("üí± VPS –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–∞: ", DoubleToString(pipValue, 5));
}

//+------------------------------------------------------------------+
//| –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞     |
//+------------------------------------------------------------------+
void ShowSymbolInfo() {
    Print("üìä === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–ú–í–û–õ–ï ", tradingSymbol, " ===");
    Print("üí∞ Bid: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_BID), Digits()));
    Print("üí∞ Ask: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_ASK), Digits()));
    Print("üìè Point: ", DoubleToString(Point(), _Digits));
    Print("üìè Digits: ", Digits());
    Print("üí± Tick Value: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_TRADE_TICK_VALUE), 5));
    Print("üìä Min Lot: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_MIN), 3));
    Print("üìä Max Lot: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_MAX), 3));
    Print("üìä Lot Step: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_VOLUME_STEP), 3));
    Print("üîì Trade Mode: ", SymbolInfoInteger(tradingSymbol, SYMBOL_TRADE_MODE));
    Print("üìä Contract Size: ", DoubleToString(SymbolInfoDouble(tradingSymbol, SYMBOL_TRADE_CONTRACT_SIZE), 2));
    Print("üìä === –ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ò–ú–í–û–õ–ï ===");
}
