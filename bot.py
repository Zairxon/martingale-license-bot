import os
import sqlite3
import secrets
import string
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 295608267
DB_FILE = 'licenses.db'

# –¶–µ–Ω–∞ –ø–æ–ª–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
LICENSE_PRICE = 100

# –û–ø–∏—Å–∞–Ω–∏–µ EA
EA_DESCRIPTION = """
ü§ñ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–û–†–ì–û–í–´–ô –°–û–í–ï–¢–ù–ò–ö**
üìä **–¢–∏–ø:** –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
üí∞ **–°–∏–º–≤–æ–ª—ã:** BTCUSD, XAUUSD (Gold)

‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:**

üìà **BTCUSD:**
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç: 0.01
‚Ä¢ Take Profit: 10000 –ø—É–Ω–∫—Ç–æ–≤  
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø–æ–≤: 3000 –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π: 15

ü•á **XAUUSD (Gold):**
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç: 0.01
‚Ä¢ Take Profit: 1000 –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø–æ–≤: 300 –ø—É–Ω–∫—Ç–æ–≤  
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π: 10

üéØ **–û–°–û–ë–ï–ù–ù–û–°–¢–ò:**
‚úÖ VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Å–∞–¥–æ–∫
‚úÖ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–π

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** 
–ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: –æ—Ç $1000 –Ω–∞ 0.01 –ª–æ—Ç.
"""

# –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
EA_INSTRUCTION = """
üìñ **–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï –ò –ù–ê–°–¢–†–û–ô–ö–ï**

üîß **–£–°–¢–ê–ù–û–í–ö–ê:**
1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª EA –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É: MetaTrader 5/MQL5/Experts/
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MetaTrader 5
4. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ EA –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –Ω—É–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

üéØ **–ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –†–ê–ó–ù–´–• –°–ò–ú–í–û–õ–û–í:**

üìä **BTCUSD (Bitcoin):**
```
–ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç: 0.01
Take Profit: 10000 –ø—É–Ω–∫—Ç–æ–≤
Buy Stop Distance: 3000 –ø—É–Ω–∫—Ç–æ–≤
–ú–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π: 15
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç: 50.0
```

ü•á **XAUUSD (–ó–æ–ª–æ—Ç–æ):**
```
–ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç: 0.01  
Take Profit: 1000 –ø—É–Ω–∫—Ç–æ–≤
Buy Stop Distance: 300 –ø—É–Ω–∫—Ç–æ–≤
–ú–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π: 10
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç: 5.0
```

üíº **–î–†–£–ì–ò–ï –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´:**
```
–ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç: 0.01
Take Profit: 500 –ø—É–Ω–∫—Ç–æ–≤
Buy Stop Distance: 150 –ø—É–Ω–∫—Ç–æ–≤
–ú–∞–∫—Å–∏–º—É–º —É–¥–≤–æ–µ–Ω–∏–π: 8
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç: 2.0
```

‚ö° **VPS –ù–ê–°–¢–†–û–ô–ö–ò:**
```
–ú–∞–∫—Å –ø–æ–ø—ã—Ç–æ–∫: 3
–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: 500 –º—Å
–ú–∏–Ω —Ç–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: 1
–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏: 5 —Å–µ–∫
```

üéõÔ∏è **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:**
‚Ä¢ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –Ω–æ–º–µ—Ä: 123456 (–∏–∑–º–µ–Ω–∏—Ç–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤)
‚Ä¢ –°–±—Ä–æ—Å –ø–æ—Å–ª–µ TP: true (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MA: true (–∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞)
‚Ä¢ –ü–µ—Ä–∏–æ–¥ —Ç—Ä–µ–Ω–¥–∞: 20

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
1. –¢–æ—Ä–≥—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ VPS –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ECN —Å—á–µ—Ç–∞ —Å –Ω–∏–∑–∫–∏–º —Å–ø—Ä–µ–¥–æ–º
3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–¥–µ–ª–∫–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ
4. –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞

‚ö†Ô∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:**
‚Ä¢ –î–µ–ø–æ–∑–∏—Ç $500+ –¥–ª—è 0.01 –ª–æ—Ç–∞ –Ω–∞ XAUUSD
‚Ä¢ –î–µ–ø–æ–∑–∏—Ç $1000+ –¥–ª—è 0.01 –ª–æ—Ç–∞ –Ω–∞ BTCUSD  
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Å—å –¥–µ–ø–æ–∑–∏—Ç
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Ä—ã–Ω–∫–∞

üÜò **–ü–û–î–î–ï–†–ñ–ö–ê:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            license_key TEXT UNIQUE,
            license_type TEXT DEFAULT 'trial',
            license_status TEXT DEFAULT 'inactive',
            expires_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ EA
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ea_files (
            id INTEGER PRIMARY KEY,
            filename TEXT NOT NULL,
            file_data BLOB NOT NULL,
            upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

def generate_license_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(16))

def register_user(user_id, username):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                      (user_id, username))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def get_user_license(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT license_key, license_status, license_type, expires_at FROM users WHERE user_id = ?', 
                      (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None

def create_trial_license(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
        cursor.execute('SELECT license_key FROM users WHERE user_id = ? AND license_type = "trial"', 
                      (user_id,))
        existing = cursor.fetchone()
        
        if existing:
            conn.close()
            return None, "–£ –≤–∞—Å —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        license_key = generate_license_key()
        expires_at = datetime.now() + timedelta(days=3)
        
        cursor.execute('''
            UPDATE users 
            SET license_key = ?, license_type = 'trial', license_status = 'active', expires_at = ?
            WHERE user_id = ?
        ''', (license_key, expires_at, user_id))
        
        conn.commit()
        conn.close()
        
        return license_key, None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"

def save_ea_file(file_data, filename):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª EA –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        cursor.execute('DELETE FROM ea_files')
        cursor.execute('INSERT INTO ea_files (filename, file_data) VALUES (?, ?)', 
                      (filename, file_data))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def get_ea_file():
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª EA –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT file_data FROM ea_files ORDER BY upload_date DESC LIMIT 1')
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return result[0]
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

def get_license_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏—Ü–µ–Ω–∑–∏–π"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE license_status = "active"')
        active_licenses = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE license_type = "trial"')
        trial_licenses = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE license_type = "full"')
        full_licenses = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'total_users': total_users,
            'active_licenses': active_licenses,
            'trial_licenses': trial_licenses,
            'full_licenses': full_licenses
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="get_trial")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é ($100)", callback_data="buy_license")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞", callback_data="show_description")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def handle_start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register_user(user_id, username)
    
    welcome_text = (
        "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Martingale EA License Bot!**\n\n"
        "üéØ **–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å–æ–≤–µ—Ç–Ω–∏–∫—É:**\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ BTCUSD –∏ XAUUSD\n"
        "‚Ä¢ VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n"
        "üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:**\n"
        "üÜì **–ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è** - 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "üí∞ **–ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è** - $100 (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=get_main_keyboard())

async def handle_help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "üîπ **/start** - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîπ **üÜì –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è** - 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "üîπ **üí∞ –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è** - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞ $100\n"
        "üîπ **üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å** - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–∏—Ü–µ–Ω–∑–∏—é\n"
        "üîπ **üìñ –û–ø–∏—Å–∞–Ω–∏–µ** - –¥–µ—Ç–∞–ª–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–æ–≤–µ—Ç–Ω–∏–∫–µ\n"
        "üîπ **üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ\n\n"
        "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @YourSupportBot"
    )
    
    await message.reply_text(help_text, parse_mode='Markdown', reply_markup=get_main_keyboard())

async def handle_get_trial(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    
    license_key, error = create_trial_license(user_id)
    
    if error:
        await query.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞!**\n\n{error}",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download_ea")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await query.message.reply_text(
        f"üéâ **–ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
        f"üîë **–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:**\n`{license_key}`\n\n"
        f"‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 3 –¥–Ω—è\n\n"
        f"üìã **–ß—Ç–æ –¥–∞–ª—å—à–µ:**\n"
        f"1. –°–∫–∞—á–∞–π—Ç–µ EA –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        f"2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ MetaTrader 5\n"
        f"3. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö EA\n\n"
        f"üí° **–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á** - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞!",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_check_status(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    license_data = get_user_license(user_id)
    
    if not license_data or not license_data[0]:
        await query.message.reply_text(
            "‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—É—é –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    
    license_key, status, license_type, expires_at = license_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
    if expires_at and datetime.now() > datetime.fromisoformat(expires_at):
        status = "expired"
    
    status_emoji = "‚úÖ" if status == "active" else "‚ùå"
    type_emoji = "üÜì" if license_type == "trial" else "üí∞"
    
    status_text = (
        f"{status_emoji} **–°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏**\n\n"
        f"üîë **–ö–ª—é—á:** `{license_key}`\n"
        f"{type_emoji} **–¢–∏–ø:** {license_type.title()}\n"
        f"üìä **–°—Ç–∞—Ç—É—Å:** {status.title()}\n"
    )
    
    if expires_at and license_type == "trial":
        status_text += f"‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expires_at}\n"
    elif license_type == "full":
        status_text += f"‚ôæÔ∏è **–°—Ä–æ–∫:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
    
    if status == "active":
        keyboard = [
            [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download_ea")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="get_trial")],
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="buy_license")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    
    await query.message.reply_text(
        status_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_show_description(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è EA"""
    keyboard = [
        [InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction")],
        [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="get_trial")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await query.message.reply_text(
        EA_DESCRIPTION,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_show_instruction(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞", callback_data="show_description")],
        [InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="get_trial")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await query.message.reply_text(
        EA_INSTRUCTION,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_buy_license(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    await query.message.reply_text(
        f"üí∞ **–ü–æ–∫—É–ø–∫–∞ –ø–æ–ª–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏**\n\n"
        f"üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${LICENSE_PRICE}\n"
        f"‚ôæÔ∏è **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n\n"
        f"üìû **–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:**\n"
        f"@YourSupportBot\n\n"
        f"üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
        f"‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (BTC, USDT)\n"
        f"‚Ä¢ PayPal\n"
        f"‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n\n"
        f"‚ö° –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )

async def handle_download_ea(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EA"""
    user_id = query.from_user.id
    license_data = get_user_license(user_id)
    
    if not license_data or license_data[1] == 'inactive':
        await query.message.reply_text(
            "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏!**\n\n"
            "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è EA –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è.\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—É—é –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        return
    
    license_key = license_data[0]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await query.message.reply_text(
        f"üìÅ **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ EA**\n\n"
        f"üîë **–í–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:** `{license_key}`\n\n"
        f"üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        f"1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        f"2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ EA –≤ –ø–∞–ø–∫—É: MQL5/Experts/\n"
        f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MetaTrader 5\n"
        f"4. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ EA –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á: `{license_key}`\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
        parse_mode='Markdown'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª EA
    try:
        ea_file_data = get_ea_file()
        if ea_file_data:
            await query.message.reply_document(
                document=ea_file_data,
                filename="Simple_VPS_Optimized_Version.ex5",
                caption=f"ü§ñ **–¢–æ—Ä–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫**\n\nüîë **–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:** `{license_key}`\n\n‚ùó –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ EA!",
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        else:
            await query.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞!**\n\n–§–∞–π–ª EA –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await query.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞!**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )

async def handle_admin_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    stats = get_license_stats()
    
    if not stats:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats['total_users']}\n"
        f"‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π:** {stats['active_licenses']}\n"
        f"üÜì **–ü—Ä–æ–±–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π:** {stats['trial_licenses']}\n"
        f"üí∞ **–ü–æ–ª–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π:** {stats['full_licenses']}\n\n"
        f"üíµ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥:** ${stats['full_licenses'] * LICENSE_PRICE}"
    )
    
    await message.reply_text(stats_text, parse_mode='Markdown')

async def handle_admin_upload_ea(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ EA —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–æ–º"""
    if message.from_user.id != ADMIN_ID:
        await message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not message.document:
        await message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª!")
        return
    
    if not message.document.file_name.endswith('.ex5'):
        await message.reply_text("‚ùå –ù—É–∂–µ–Ω —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ex5!")
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.document.get_file()
        file_data = await file.download_as_bytearray()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if save_ea_file(file_data, message.document.file_name):
            await message.reply_text(
                f"‚úÖ **–§–∞–π–ª EA –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"üìÅ **–ò–º—è —Ñ–∞–π–ª–∞:** {message.document.file_name}\n"
                f"üìä **–†–∞–∑–º–µ—Ä:** {len(file_data)} –±–∞–π—Ç\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é EA.",
                parse_mode='Markdown'
            )
        else:
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞!")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    await query.answer()
    
    if data == "get_trial":
        await handle_get_trial(query)
    elif data == "check_status":
        await handle_check_status(query)
    elif data == "show_description":
        await handle_show_description(query)
    elif data == "show_instruction":
        await handle_show_instruction(query)
    elif data == "buy_license":
        await handle_buy_license(query)
    elif data == "download_ea":
        await handle_download_ea(query)
    elif data == "back_to_menu":
        await handle_start_command(query.message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    user_id = message.from_user.id
    text = message.text
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–æ–≤—ã–π
    register_user(user_id, message.from_user.username or "Unknown")
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if user_id == ADMIN_ID:
        if text == "/stats":
            await handle_admin_stats(message)
            return
        elif text == "/upload_ea":
            await message.reply_text(
                "üìÅ **–ó–∞–≥—Ä—É–∑–∫–∞ EA —Ñ–∞–π–ª–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "–≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ EA.",
                parse_mode='Markdown'
            )
            return
        elif message.document:
            await handle_admin_upload_ea(message)
            return
    
    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text == "/start":
        await handle_start_command(message)
    elif text == "/help":
        await handle_help_command(message)
    else:
        await message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üë®‚Äçüíº Admin ID: {ADMIN_ID}")
    print("=" * 50)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:")
    print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /upload_ea")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –±–æ—Ç—É")
    print("3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", lambda update, context: handle_message(update, context)))
    application.add_handler(CommandHandler("help", lambda update, context: handle_message(update, context)))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()
