import logging
import sqlite3
import asyncio
import uuid
import datetime
from typing import Optional
import os
from dataclasses import dataclass

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7946468786:AAGGeUgN6liN462JMcTG31aWCRKk4n7BB1M"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_ID = 295698267  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
LICENSE_PRICE = 100  # –¶–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ USD

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
BANK_DETAILS = """
üí≥ **–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´:**

üè¶ **–ë–∞–Ω–∫:** Kapital Bank Uzbekistan
üî¢ **–ú–§–û:** 01158
üí∞ **–°—á–µ—Ç:** 22618 840 092855351 001
üí≥ **–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** 4278 3200 2190 9386

üíµ **–°—É–º–º–∞:** $100 USD
‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 30 –¥–Ω–µ–π

üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ $100 –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç –±–æ—Ç
4. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
"""

@dataclass
class User:
    user_id: int
    username: str
    license_key: Optional[str]
    license_expiry: Optional[datetime.datetime]
    payment_pending: bool
    created_at: datetime.datetime

class DatabaseManager:
    def __init__(self, db_path: str = "licenses.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                license_key TEXT UNIQUE,
                license_expiry TIMESTAMP,
                payment_pending BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                license_key TEXT,
                amount REAL,
                status TEXT DEFAULT 'pending',
                screenshot_file_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                confirmed_at TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        """)
        
        conn.commit()
        conn.close()
    
    def get_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return User(
                user_id=row[0],
                username=row[1],
                license_key=row[2],
                license_expiry=datetime.datetime.fromisoformat(row[3]) if row[3] else None,
                payment_pending=bool(row[4]),
                created_at=datetime.datetime.fromisoformat(row[5])
            )
        return None
    
    def create_user(self, user_id: int, username: str) -> User:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT OR REPLACE INTO users (user_id, username, created_at)
            VALUES (?, ?, ?)
        """, (user_id, username, datetime.datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        
        return self.get_user(user_id)
    
    def generate_license_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        return f"MEA-{uuid.uuid4().hex[:8].upper()}-{uuid.uuid4().hex[:8].upper()}"
    
    def create_payment_request(self, user_id: int, screenshot_file_id: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        license_key = self.generate_license_key()
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users SET payment_pending = TRUE WHERE user_id = ?
        """, (user_id,))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        cursor.execute("""
            INSERT INTO payments (user_id, license_key, amount, screenshot_file_id)
            VALUES (?, ?, ?, ?)
        """, (user_id, license_key, LICENSE_PRICE, screenshot_file_id))
        
        conn.commit()
        conn.close()
        
        return license_key
    
    def confirm_payment(self, user_id: int, license_key: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"""
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=30)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users SET 
                license_key = ?, 
                license_expiry = ?, 
                payment_pending = FALSE 
            WHERE user_id = ?
        """, (license_key, expiry_date.isoformat(), user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
        cursor.execute("""
            UPDATE payments SET 
                status = 'confirmed', 
                confirmed_at = ? 
            WHERE user_id = ? AND license_key = ?
        """, (datetime.datetime.now().isoformat(), user_id, license_key))
        
        conn.commit()
        conn.close()
    
    def get_pending_payments(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT p.*, u.username FROM payments p
            JOIN users u ON p.user_id = u.user_id
            WHERE p.status = 'pending'
            ORDER BY p.created_at DESC
        """)
        
        rows = cursor.fetchall()
        conn.close()
        return rows

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

db = DatabaseManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    db_user = db.get_user(user.id)
    
    if not db_user:
        db_user = db.create_user(user.id, user.username or user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é ($100)", callback_data="buy_license")],
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MartingaleEA License Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ **MartingaleVPS Enhanced v1.60**.

üíº **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:**
‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ 30 –¥–Ω–µ–π
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–Ω–∏–∫–∞

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** $100 USD –∑–∞ –º–µ—Å—è—Ü

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "buy_license":
        await handle_buy_license(query)
    elif data == "check_status":
        await handle_check_status(query)
    elif data == "help":
        await handle_help(query)
    elif data.startswith("confirm_payment_"):
        payment_id = data.split("_")[-1]
        await handle_confirm_payment(query, payment_id)

async def handle_buy_license(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
    if user.license_key and user.license_expiry:
        if user.license_expiry > datetime.datetime.now():
            await query.edit_message_text(
                f"‚úÖ **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è!**\n\n"
                f"üîë **–ö–ª—é—á:** `{user.license_key}`\n"
                f"‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {user.license_expiry.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='Markdown'
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
    if user.payment_pending:
        await query.edit_message_text(
            "‚è≥ **–£ –≤–∞—Å –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        BANK_DETAILS + "\n\n**–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç!**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_check_status(query):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if not user.license_key:
        status_text = "‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é."
    elif user.license_expiry and user.license_expiry > datetime.datetime.now():
        days_left = (user.license_expiry - datetime.datetime.now()).days
        status_text = f"""
‚úÖ **–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞!**

üîë **–ö–ª—é—á:** `{user.license_key}`
‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {user.license_expiry.strftime('%d.%m.%Y %H:%M')}
üìÖ **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {days_left}
"""
    else:
        status_text = f"""
‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞**

üîë **–ö–ª—é—á:** `{user.license_key}`
‚è∞ **–ò—Å—Ç–µ–∫–ª–∞:** {user.license_expiry.strftime('%d.%m.%Y %H:%M')}

–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_help(query):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/buy` - –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
‚Ä¢ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏

**–ö–∞–∫ –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é:**
1. –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"
2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ $100 –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ –±–æ—Ç
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 24 —á–∞—Å–æ–≤)
5. –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @your_support_username

**–í–∞–∂–Ω–æ:**
‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π
‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á = –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª
‚Ä¢ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ"""
    user = update.effective_user
    
    if update.message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
        license_key = db.create_payment_request(user.id, file_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            f"‚úÖ **–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!**\n\n"
            f"üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            f"üé´ **–í–∞—à –Ω–æ–º–µ—Ä:** {license_key}\n\n"
            f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n"
            f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notify_admin_about_payment(context, user, license_key, file_id)
    
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç) —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ."
        )

async def notify_admin_about_payment(context, user, license_key, file_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user.id}_{license_key}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{user.id}_{license_key}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = f"""
üîî **–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} (@{user.username or '–±–µ–∑ username'})
üÜî **ID:** `{user.id}`
üé´ **–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** `{license_key}`
üí∞ **–°—É–º–º–∞:** $100 USD
‚è∞ **–í—Ä–µ–º—è:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:
"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=admin_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def handle_confirm_payment(query, payment_info):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        parts = payment_info.split('_')
        user_id = int(parts[0])
        license_key = '_'.join(parts[1:])
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.confirm_payment(user_id, license_key)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = f"""
üéâ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!**

‚úÖ –í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üîë **–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á:** `{license_key}`
‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {(datetime.datetime.now() + datetime.timedelta(days=30)).strftime('%d.%m.%Y %H:%M')}

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á: `{license_key}`
2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞

üíº –ü—Ä–∏—è—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!
"""
        
        await query.bot.send_message(
            chat_id=user_id,
            text=user_text,
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await query.edit_message_caption(
            caption=f"‚úÖ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù**\n\n{query.message.caption}",
            parse_mode='Markdown'
        )
        
        await query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()