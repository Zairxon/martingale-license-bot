import logging
import sqlite3
import asyncio
import uuid
import datetime
import hashlib
import base64
import os
from typing import Optional
from dataclasses import dataclass
import io

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7946468786:AAGGeUgN6liN462JMcTG31aWCRKk4n7BB1M"
ADMIN_ID = 295698267  # @Zair_Khudayberganov
LICENSE_PRICE = 100  # –¶–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ USD
TRIAL_DAYS = 3  # –î–Ω–∏ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
FULL_LICENSE_DAYS = 30  # –î–Ω–∏ –ø–æ–ª–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
BANK_DETAILS = """
üí≥ **–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´:**

üè¶ **–ë–∞–Ω–∫:** Kapital Bank Uzbekistan
üî¢ **–ú–§–û:** 01158
üí∞ **–°—á–µ—Ç:** 22618 840 092855351 001
üí≥ **–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** 4278 3200 2190 9386

üíµ **–°—É–º–º–∞:** $100 USD
‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 30 –¥–Ω–µ–π

üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ $100 –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç –±–æ—Ç
4. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
5. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 30 –¥–Ω–µ–π
"""

# –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞
EA_DESCRIPTION = """
ü§ñ **MartingaleVPS Enhanced v1.60**

**–û–ø–∏—Å–∞–Ω–∏–µ:**
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä–∞—Ö —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏.

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã:**
‚Ä¢ üü° **BTCUSD** - Bitcoin (–æ—Å–Ω–æ–≤–Ω–æ–π)
‚Ä¢ ü•á **XAUUSD** - –ó–æ–ª–æ—Ç–æ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)

‚ùå **–í–Ω–∏–º–∞–Ω–∏–µ:** –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏!

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ ‚úÖ VPS-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
‚Ä¢ ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
‚Ä¢ ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–¥–≤–æ–µ–Ω–∏—è –ª–æ—Ç–æ–≤ (–º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª)
‚Ä¢ ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π Take Profit
‚Ä¢ ‚úÖ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤

**–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**

üìä **–î–ª—è XAUUSD (–∑–æ–ª–æ—Ç–æ):**
‚Ä¢ Take Profit: 10,000 –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ Stop Distance: 3,000 –ø—É–Ω–∫—Ç–æ–≤  
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–µ –∏–∑–º–µ–Ω—è—Ç—å)

üìä **–î–ª—è BTCUSD (–±–∏—Ç–∫–æ–∏–Ω):**
‚Ä¢ Take Profit: 100,000 –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ Stop Distance: 30,000 –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏:**

üí∞ **–ë–∞–ª–∞–Ω—Å $100-999:**
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 0.01 –ª–æ—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 0.10 –ª–æ—Ç (—Ä–∏—Å–∫ –≤—ã—Å–æ–∫–∏–π)

üí∞ **–ë–∞–ª–∞–Ω—Å $1000+:**
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 0.10 –ª–æ—Ç  
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1.00 –ª–æ—Ç (—Ä–∏—Å–∫ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π)

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ üîí –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ üîí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: M1-M15
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $100
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: $1000+
‚Ä¢ VPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã

**–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ –ª–∏—Ü–µ–Ω–∑–∏—é
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
"""

@dataclass
class User:
    user_id: int
    username: str
    license_key: Optional[str]
    license_expiry: Optional[datetime.datetime]
    license_type: str  # 'trial' –∏–ª–∏ 'full'
    payment_pending: bool
    account_number: Optional[str]  # –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç
    trial_used: bool  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    downloads_count: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    created_at: datetime.datetime

class DatabaseManager:
    def __init__(self, db_path: str = "licenses.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                license_key TEXT UNIQUE,
                license_expiry TIMESTAMP,
                license_type TEXT DEFAULT 'trial',
                payment_pending BOOLEAN DEFAULT FALSE,
                account_number TEXT,
                trial_used BOOLEAN DEFAULT FALSE,
                downloads_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                license_key TEXT,
                amount REAL,
                status TEXT DEFAULT 'pending',
                screenshot_file_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                confirmed_at TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS downloads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                download_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ip_hash TEXT,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ EA
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS ea_files (
                id INTEGER PRIMARY KEY,
                filename TEXT,
                file_data BLOB,
                version TEXT,
                uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS license_checks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                license_key TEXT,
                account_number TEXT,
                check_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT,
                ip_hash TEXT
            )
        """)
        
        conn.commit()
        conn.close()
    
    def get_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return User(
                user_id=row[0],
                username=row[1],
                license_key=row[2],
                license_expiry=datetime.datetime.fromisoformat(row[3]) if row[3] else None,
                license_type=row[4] or 'trial',
                payment_pending=bool(row[5]),
                account_number=row[6],
                trial_used=bool(row[7]),
                downloads_count=row[8] or 0,
                created_at=datetime.datetime.fromisoformat(row[9])
            )
        return None
    
    def create_user(self, user_id: int, username: str) -> User:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT OR REPLACE INTO users (user_id, username, created_at)
            VALUES (?, ?, ?)
        """, (user_id, username, datetime.datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        
        return self.get_user(user_id)
    
    def generate_license_key(self, license_type: str = 'trial') -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        prefix = "TRIAL" if license_type == 'trial' else "FULL"
        return f"MEA-{prefix}-{uuid.uuid4().hex[:8].upper()}-{uuid.uuid4().hex[:8].upper()}"
    
    def create_trial_license(self, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é"""
        if self.is_trial_used(user_id):
            return False, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        
        license_key = self.generate_license_key('trial')
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=TRIAL_DAYS)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE users SET 
                license_key = ?, 
                license_expiry = ?, 
                license_type = 'trial',
                trial_used = TRUE
            WHERE user_id = ?
        """, (license_key, expiry_date.isoformat(), user_id))
        
        conn.commit()
        conn.close()
        
        return True, license_key
    
    def is_trial_used(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        user = self.get_user(user_id)
        return user.trial_used if user else False
    
    def create_payment_request(self, user_id: int, screenshot_file_id: str):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        license_key = self.generate_license_key('full')
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users SET payment_pending = TRUE WHERE user_id = ?
        """, (user_id,))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        cursor.execute("""
            INSERT INTO payments (user_id, license_key, amount, screenshot_file_id)
            VALUES (?, ?, ?, ?)
        """, (user_id, license_key, LICENSE_PRICE, screenshot_file_id))
        
        conn.commit()
        conn.close()
        
        return license_key
    
    def confirm_payment(self, user_id: int, license_key: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é"""
        expiry_date = datetime.datetime.now() + datetime.timedelta(days=FULL_LICENSE_DAYS)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users SET 
                license_key = ?, 
                license_expiry = ?, 
                license_type = 'full',
                payment_pending = FALSE 
            WHERE user_id = ?
        """, (license_key, expiry_date.isoformat(), user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
        cursor.execute("""
            UPDATE payments SET 
                status = 'confirmed', 
                confirmed_at = ? 
            WHERE user_id = ? AND license_key = ?
        """, (datetime.datetime.now().isoformat(), user_id, license_key))
        
        conn.commit()
        conn.close()
    
    def increment_download_count(self, user_id: int):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE users SET downloads_count = downloads_count + 1 WHERE user_id = ?
        """, (user_id,))
        
        cursor.execute("""
            INSERT INTO downloads (user_id) VALUES (?)
        """, (user_id,))
        
        conn.commit()
        conn.close()
    
    def get_pending_payments(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT p.*, u.username FROM payments p
            JOIN users u ON p.user_id = u.user_id
            WHERE p.status = 'pending'
            ORDER BY p.created_at DESC
        """)
        
        rows = cursor.fetchall()
        conn.close()
        return rows
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE trial_used = TRUE")
        trial_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE license_type = 'full' AND license_expiry > ?", 
                      (datetime.datetime.now().isoformat(),))
        active_full_licenses = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(downloads_count) FROM users")
        total_downloads = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*) FROM payments WHERE status = 'confirmed'")
        confirmed_payments = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'total_users': total_users,
            'trial_users': trial_users,
            'active_licenses': active_full_licenses,
            'total_downloads': total_downloads,
            'confirmed_payments': confirmed_payments
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

db = DatabaseManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    db_user = db.get_user(user.id)
    
    if not db_user:
        db_user = db.create_user(user.id, user.username or user.first_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏
    has_active_license = False
    if db_user.license_key and db_user.license_expiry:
        has_active_license = db_user.license_expiry > datetime.datetime.now()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    keyboard = []
    
    if not db_user.trial_used:
        keyboard.append([InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="get_trial")])
    
    if not has_active_license:
        keyboard.append([InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é ($100)", callback_data="buy_license")])
    
    keyboard.extend([
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞", callback_data="show_description")],
        [InlineKeyboardButton("‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instructions")]
    ])
    
    if has_active_license:
        keyboard.append([InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å EA —Ñ–∞–π–ª", callback_data="download_ea")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MartingaleEA License Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ **MartingaleVPS Enhanced v1.60**.

üéÅ **–°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:**
‚Ä¢ 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

üíº **–ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è:**
‚Ä¢ 30 –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: $100 USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "get_trial":
        await handle_get_trial(query)
    elif data == "buy_license":
        await handle_buy_license(query)
    elif data == "check_status":
        await handle_check_status(query)
    elif data == "show_description":
        await handle_show_description(query)
    elif data == "show_instructions":
        await handle_show_instructions(query)
    elif data == "download_ea":
        await handle_download_ea(query)
    elif data == "back_to_menu":
        await start_from_callback(query)
    elif data.startswith("confirm_payment_"):
        payment_info = data.replace("confirm_payment_", "")
        await handle_confirm_payment(query, payment_info)
    elif data.startswith("reject_payment_"):
        payment_info = data.replace("reject_payment_", "")
        await handle_reject_payment(query, payment_info)

async def handle_get_trial(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    
    success, result = db.create_trial_license(user_id)
    
    if not success:
        await query.edit_message_text(
            f"‚ùå **{result}**\n\n"
            f"–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
            f"–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.",
            parse_mode='Markdown'
        )
        return
    
    license_key = result
    keyboard = [
        [InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å EA —Ñ–∞–π–ª", callback_data="download_ea")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", callback_data="show_instructions")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    trial_text = f"""
üéâ **–ü–†–û–ë–ù–ê–Ø –õ–ò–¶–ï–ù–ó–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!**

‚úÖ **–í–∞—à –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á:** `{license_key}`
‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç:** 3 –¥–Ω—è (72 —á–∞—Å–∞)
üéØ **–¢–∏–ø:** –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

**üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:**
1. –°–∫–∞—á–∞–π—Ç–µ EA —Ñ–∞–π–ª (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)
2. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ MetaTrader 5
4. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á: `{license_key}`
5. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!

**‚ö†Ô∏è –í–∞–∂–Ω–æ:**
‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á = –æ–¥–∏–Ω —Å—á–µ—Ç
‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é

üí∞ **–ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è: $100 –∑–∞ 30 –¥–Ω–µ–π**
"""
    
    await query.edit_message_text(trial_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_buy_license(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
    if user.license_type == 'full' and user.license_expiry:
        if user.license_expiry > datetime.datetime.now():
            await query.edit_message_text(
                f"‚úÖ **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è!**\n\n"
                f"üîë **–ö–ª—é—á:** `{user.license_key}`\n"
                f"‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {user.license_expiry.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è.",
                parse_mode='Markdown'
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
    if user.payment_pending:
        await query.edit_message_text(
            "‚è≥ **–£ –≤–∞—Å –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        BANK_DETAILS + "\n\n**–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç!**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_check_status(query):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if not user.license_key:
        status_text = """
‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**

–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:**
‚Ä¢ üÜì –ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é ($100)
"""
    elif user.license_expiry and user.license_expiry > datetime.datetime.now():
        days_left = (user.license_expiry - datetime.datetime.now()).days
        hours_left = (user.license_expiry - datetime.datetime.now()).seconds // 3600
        
        license_emoji = "üÜì" if user.license_type == 'trial' else "üíé"
        license_name = "–ü—Ä–æ–±–Ω–∞—è" if user.license_type == 'trial' else "–ü–æ–ª–Ω–∞—è"
        
        status_text = f"""
‚úÖ **–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞!**

{license_emoji} **–¢–∏–ø:** {license_name}
üîë **–ö–ª—é—á:** `{user.license_key}`
‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {user.license_expiry.strftime('%d.%m.%Y %H:%M')}
üìÖ **–û—Å—Ç–∞–ª–æ—Å—å:** {days_left} –¥–Ω. {hours_left} —á.
üìä **–°–∫–∞—á–∏–≤–∞–Ω–∏–π:** {user.downloads_count}
"""
    else:
        license_name = "–ü—Ä–æ–±–Ω–∞—è" if user.license_type == 'trial' else "–ü–æ–ª–Ω–∞—è"
        status_text = f"""
‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞**

üîë **–ö–ª—é—á:** `{user.license_key}`
üìù **–¢–∏–ø:** {license_name}
‚è∞ **–ò—Å—Ç–µ–∫–ª–∞:** {user.license_expiry.strftime('%d.%m.%Y %H:%M')}

–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_show_description(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(EA_DESCRIPTION, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_show_instructions(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    instructions = """
üìñ **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï –ò –ù–ê–°–¢–†–û–ô–ö–ï**

**1. –°–ò–°–¢–ï–ú–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:**
‚Ä¢ MetaTrader 5 (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $100

**2. –£–°–¢–ê–ù–û–í–ö–ê EA:**
‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª EA –∏–∑ –±–æ—Ç–∞
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–∞–ø–∫—É: `MetaTrader 5/MQL5/Experts/`
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MetaTrader 5
‚Ä¢ EA –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–µ

**3. –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –°–ò–ú–í–û–õ–´:**
üü¢ **BTCUSD** - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º–≤–æ–ª
üü¢ **XAUUSD** - –∑–æ–ª–æ—Ç–æ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)

‚ùå **–î—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è!**

**4. –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –°–ò–ú–í–û–õ–ê–ú:**

üìä **–î–ª—è XAUUSD:**
‚Ä¢ TakeProfitPips: `10000` (–Ω–µ –∏–∑–º–µ–Ω—è—Ç—å)
‚Ä¢ BuyStopPips: `3000` (–Ω–µ –∏–∑–º–µ–Ω—è—Ç—å)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

üìä **–î–ª—è BTCUSD:**
‚Ä¢ TakeProfitPips: `100000` (–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–ª—å)
‚Ä¢ BuyStopPips: `30000` (–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–ª—å)
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!

**5. –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–¢–ê–ú–ò:**

üí∞ **–ë–∞–ª–∞–Ω—Å $100-999:**
‚Ä¢ ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: `0.01` –ª–æ—Ç
‚Ä¢ ‚ö†Ô∏è –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ: `0.10` –ª–æ—Ç
‚Ä¢ ‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –±–æ–ª—å—à–µ 0.10

üí∞ **–ë–∞–ª–∞–Ω—Å $1000+:**
‚Ä¢ ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: `0.10` –ª–æ—Ç
‚Ä¢ ‚ö†Ô∏è –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ: `1.00` –ª–æ—Ç
‚Ä¢ ‚ùå –ö—Ä–∞–π–Ω–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ: –±–æ–ª—å—à–µ 1.00

**6. –ê–ö–¢–ò–í–ê–¶–ò–Ø –õ–ò–¶–ï–ù–ó–ò–ò:**
‚Ä¢ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ EA –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
‚Ä¢ –í –ø–æ–ª–µ "LicenseKey" –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é (–≥–∞–ª–æ—á–∫–∞)
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ OK

**7. –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´:**
‚Ä¢ –í –∂—É—Ä–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è: "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
‚Ä¢ –°—Ç–∞—Ç—É—Å: "–¢–û–†–ì–£–ï–¢" –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É –≥—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ –ü–æ—è–≤—è—Ç—Å—è —É—Ä–æ–≤–Ω–∏ —Å–µ—Å—Å–∏–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ

**‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:**

üîí **–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á = –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç MT5
‚Ä¢ –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—á–µ—Ç–∞ –∫–ª—é—á –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –æ–Ω–ª–∞–π–Ω

üìà **–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:**
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Å—å –¥–µ–ø–æ–∑–∏—Ç —Å—Ä–∞–∑—É
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ—Å–∞–¥–∫–æ–π (–Ω–µ –±–æ–ª–µ–µ 30%)
‚Ä¢ –ü—Ä–∏ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤ - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ VPS —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ü–∏–Ω–≥ –∫ –±—Ä–æ–∫–µ—Ä—É –Ω–µ –±–æ–ª–µ–µ 50ms
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

**8. –ü–û–ò–°–ö –ò –£–°–¢–†–ê–ù–ï–ù–ò–ï –ù–ï–ò–°–ü–†–ê–í–ù–û–°–¢–ï–ô:**

‚ùå **"–ù–µ–≤–µ—Ä–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è":**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ EA

‚ùå **"–°–∏–º–≤–æ–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è":**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ BTCUSD –∏–ª–∏ XAUUSD
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞

‚ùå **"–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞":**
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä—ã–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏

**üÜò –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê:**
‚Ä¢ Telegram: @Zair_Khudayberganov
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤
‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ: —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ + –≤–∞—à –∫–ª—é—á
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ

**üí° –°–û–í–ï–¢–´ –î–õ–Ø –£–°–ü–ï–®–ù–û–ô –¢–û–†–ì–û–í–õ–ò:**
‚Ä¢ –¢–æ—Ä–≥—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–õ–æ–Ω–¥–æ–Ω, –ù—å—é-–ô–æ—Ä–∫)
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–æ –≤—Ä–µ–º—è –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ–≤–µ—Ç–Ω–∏–∫–∞
‚Ä¢ –í–µ–¥–∏—Ç–µ —É—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instructions, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_download_ea(query):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ EA —Ñ–∞–π–ª–∞"""
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏
    if not user.license_key or not user.license_expiry:
        await query.edit_message_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
            "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è.\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—É—é –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é."
        )
        return
    
    if user.license_expiry <= datetime.datetime.now():
        await query.edit_message_text(
            "‚ùå **–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            "–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é."
        )
        return
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î)
    await query.edit_message_text(
        """
‚¨áÔ∏è **–°–ö–ê–ß–ò–í–ê–ù–ò–ï EA –§–ê–ô–õ–ê**

üìÅ **–§–∞–π–ª:** MartingaleVPS_Enhanced_v1.60.ex5
üìè **–†–∞–∑–º–µ—Ä:** ~45 KB
üîí **–ó–∞—â–∏—â–µ–Ω–æ –ª–∏—Ü–µ–Ω–∑–∏–µ–π**

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:**
`https://temp-download-link.com/ea-file-{}`

‚è∞ **–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç**

üìã **–ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:**
1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É MetaTrader 5/MQL5/Experts/
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MetaTrader 5
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á: `{}`

**‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:** –ö–∞–∂–¥–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.
""".format(user.license_key[:8], user.license_key),
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    db.increment_download_count(user_id)
    
    # –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
    # await query.message.reply_document(document=InputFile(ea_file_data, filename="MartingaleVPS_Enhanced_v1.60.ex5"))

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ"""
    user = update.effective_user
    
    if update.message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
        license_key = db.create_payment_request(user.id, file_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            f"‚úÖ **–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!**\n\n"
            f"üîÑ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            f"üé´ **–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** {license_key}\n\n"
            f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n"
            f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 30 –¥–Ω–µ–π.",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notify_admin_about_payment(context, user, license_key, file_id)
    
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç) —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ."
        )

async def notify_admin_about_payment(context, user, license_key, file_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user.id}_{license_key}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{user.id}_{license_key}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = f"""
üîî **–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} (@{user.username or '–±–µ–∑ username'})
üÜî **ID:** `{user.id}`
üé´ **–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** `{license_key}`
üí∞ **–°—É–º–º–∞:** $100 USD
‚è∞ **–í—Ä–µ–º—è:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:
"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=admin_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def handle_confirm_payment(query, payment_info):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        parts = payment_info.split('_')
        user_id = int(parts[0])
        license_key = '_'.join(parts[1:])
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.confirm_payment(user_id, license_key)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = f"""
üéâ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!**

‚úÖ –í–∞—à–∞ –ü–û–õ–ù–ê–Ø –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üíé **–í–∞—à –∫–ª—é—á:** `{license_key}`
‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {(datetime.datetime.now() + datetime.timedelta(days=30)).strftime('%d.%m.%Y %H:%M')}
üéØ **–¢–∏–ø:** –ü–æ–ª–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è (30 –¥–Ω–µ–π)

**üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:**
1. –°–∫–∞—á–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π EA —Ñ–∞–π–ª
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á: `{license_key}`
3. –ü–æ–ª–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞

üíº –ü—Ä–∏—è—Ç–Ω–æ–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!
"""
        
        keyboard = [
            [InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å EA —Ñ–∞–π–ª", callback_data="download_ea")],
            [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instructions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.bot.send_message(
            chat_id=user_id,
            text=user_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await query.edit_message_caption(
            caption=f"‚úÖ **–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù**\n\n{query.message.caption}",
            parse_mode='Markdown'
        )
        
        await query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!")

async def handle_reject_payment(query, payment_info):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return
    
    try:
        parts = payment_info.split('_')
        user_id = int(parts[0])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await query.bot.send_message(
            chat_id=user_id,
            text="""
‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —á–µ–∫–µ
‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Zair_Khudayberganov
""",
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await query.edit_message_caption(
            caption=f"‚ùå **–ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù**\n\n{query.message.caption}",
            parse_mode='Markdown'
        )
        
        await query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!")

async def start_from_callback(query):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback"""
    user = query.from_user
    db_user = db.get_user(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏
    has_active_license = False
    if db_user.license_key and db_user.license_expiry:
        has_active_license = db_user.license_expiry > datetime.datetime.now()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    if not db_user.trial_used:
        keyboard.append([InlineKeyboardButton("üÜì –ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="get_trial")])
    
    if not has_active_license or db_user.license_type == 'trial':
        keyboard.append([InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é ($100)", callback_data="buy_license")])
    
    keyboard.extend([
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞", callback_data="show_description")],
        [InlineKeyboardButton("‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instructions")]
    ])
    
    if has_active_license:
        keyboard.append([InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å EA —Ñ–∞–π–ª", callback_data="download_ea")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
ü§ñ **MartingaleEA License Bot**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name}! üëã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    stats = db.get_stats()
    
    stats_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {stats['trial_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π: {stats['active_licenses']}

üí∞ **–ü–ª–∞—Ç–µ–∂–∏:**
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {stats['confirmed_payments']}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats['confirmed_payments'] * LICENSE_PRICE}

üìÅ **–°–∫–∞—á–∏–≤–∞–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats['total_downloads']}

‚è∞ **–í—Ä–µ–º—è:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ MartingaleEA License Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìä –ê–¥–º–∏–Ω: @Zair_Khudayberganov (ID: {ADMIN_ID})")
    application.run_polling()

if __name__ == '__main__':
    main()
