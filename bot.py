#!/usr/bin/env python3
import os
import sqlite3
import secrets
import string
import logging
import hashlib
import time
from datetime import datetime, timedelta
from io import BytesIO
from flask import Flask, request, jsonify
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot –∏ flask")
    print("pip install python-telegram-bot flask")
    exit(1)

# ===============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===============================
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 295698267
MONTHLY_PRICE = 100
TRIAL_DAYS = 3
API_SECRET = "RFX_SECRET_2025"  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è API
API_PORT = int(os.getenv('PORT', 5000))  # –ü–æ—Ä—Ç –¥–ª—è Railway

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
VISA_CARD = "4278 3100 2430 7167"
HUMO_CARD = "9860 1001 2541 9018"
CARD_OWNER = "Asqarov Rasulbek"

print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
print(f"üë®‚Äçüíº Admin ID: {ADMIN_ID}")
print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: {MONTHLY_PRICE} USD")
print(f"üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è")
print(f"üîó API –ø–æ—Ä—Ç: {API_PORT}")

# ===============================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ===============================
def init_db():
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ö–õ–Æ–ß–ò)
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            license_key TEXT UNIQUE,
            license_type TEXT DEFAULT 'none',
            license_status TEXT DEFAULT 'inactive',
            expires_at TEXT,
            bound_account TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            trial_used INTEGER DEFAULT 0,
            key_generated INTEGER DEFAULT 0
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–∏—Ü–µ–Ω–∑–∏–π (–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)
        c.execute('''CREATE TABLE IF NOT EXISTS license_activity (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            license_key TEXT,
            account_number TEXT,
            ip_address TEXT,
            last_check TEXT DEFAULT CURRENT_TIMESTAMP,
            check_count INTEGER DEFAULT 1,
            UNIQUE(license_key, account_number)
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount INTEGER DEFAULT 100,
            status TEXT DEFAULT 'pending',
            receipt_file_id TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ EA —Ñ–∞–π–ª–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS ea_files (
            id INTEGER PRIMARY KEY,
            filename TEXT,
            file_data BLOB
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ API
        c.execute('''CREATE TABLE IF NOT EXISTS api_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            license_key TEXT,
            account_number TEXT,
            action TEXT,
            result TEXT,
            ip_address TEXT,
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")

# ===============================
# –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ===============================
def generate_permanent_key(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id
    secret_data = f"{user_id}_{API_SECRET}_PERMANENT"
    hash_key = hashlib.sha256(secret_data.encode()).hexdigest()[:16].upper()
    
    # –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: RFX-XXXXX-XXXXX-XXXXX
    key = f"RFX-{hash_key[:4]}-{hash_key[4:8]}-{hash_key[8:12]}-{hash_key[12:16]}"
    return key

def validate_license_key(license_key):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞"""
    return license_key.startswith("RFX-") and len(license_key) == 24

def is_admin(user_id):
    return int(user_id) == ADMIN_ID

def check_license_expired(expires_at):
    if not expires_at:
        return False
    try:
        return datetime.now() > datetime.fromisoformat(expires_at)
    except:
        return True

def format_datetime(dt_string):
    try:
        dt = datetime.fromisoformat(dt_string)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# ===============================
# –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ===============================
def register_user(user_id, username):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def get_or_create_user_key(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π"""
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª—é—á
        c.execute('SELECT license_key FROM users WHERE user_id = ? AND license_key IS NOT NULL', (user_id,))
        result = c.fetchone()
        
        if result:
            key = result[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á
            key = generate_permanent_key(user_id)
            c.execute('UPDATE users SET license_key = ?, key_generated = 1 WHERE user_id = ?', (key, user_id))
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {key}")
        
        conn.commit()
        conn.close()
        return key
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
        return None

def get_user_license(user_id):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('''SELECT license_key, license_type, license_status, expires_at, trial_used, 
                    bound_account FROM users WHERE user_id = ?''', (user_id,))
        result = c.fetchone()
        conn.close()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None

def create_trial_license(user_id):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        c.execute('SELECT trial_used FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        
        if result and result[0] == 1:
            conn.close()
            return None, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key = get_or_create_user_key(user_id)
        if not key:
            conn.close()
            return None, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞"
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        expires = (datetime.now() + timedelta(days=TRIAL_DAYS)).isoformat()
        
        c.execute('''UPDATE users SET 
            license_type = 'trial', license_status = 'active', 
            expires_at = ?, trial_used = 1, bound_account = NULL
            WHERE user_id = ?''', (expires, user_id))
        
        conn.commit()
        conn.close()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {key}")
        return key, None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"

def create_monthly_license(user_id):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key = get_or_create_user_key(user_id)
        if not key:
            conn.close()
            return None, None
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        expires = (datetime.now() + timedelta(days=30)).isoformat()
        
        c.execute('''UPDATE users SET 
            license_type = 'monthly', license_status = 'active', 
            expires_at = ?, bound_account = NULL
            WHERE user_id = ?''', (expires, user_id))
        
        conn.commit()
        conn.close()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –º–µ—Å—è—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {key}")
        return key, expires
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None, None

def create_payment_request(user_id, username):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('INSERT INTO payments (user_id, username, amount) VALUES (?, ?, ?)', 
                 (user_id, username, MONTHLY_PRICE))
        payment_id = c.lastrowid
        conn.commit()
        conn.close()
        return payment_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return None

def save_receipt(payment_id, file_id):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('UPDATE payments SET receipt_file_id = ? WHERE id = ?', (file_id, payment_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        return False

def approve_payment(payment_id):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        c.execute('SELECT user_id FROM payments WHERE id = ?', (payment_id,))
        result = c.fetchone()
        if not result:
            conn.close()
            return None
        
        user_id = result[0]
        license_key, expires = create_monthly_license(user_id)
        
        if license_key:
            c.execute('UPDATE payments SET status = "approved" WHERE id = ?', (payment_id,))
            conn.commit()
        
        conn.close()
        return license_key, user_id, expires
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        return None

def save_ea_file(file_data, filename):
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('DELETE FROM ea_files')
        c.execute('INSERT INTO ea_files (filename, file_data) VALUES (?, ?)', (filename, file_data))
        conn.commit()
        conn.close()
        logger.info(f"EA —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è EA: {e}")
        return False

def get_ea_file():
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('SELECT filename, file_data FROM ea_files LIMIT 1')
        result = c.fetchone()
        conn.close()
        
        if result:
            filename, file_data = result
            logger.info(f"EA —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {filename}, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
            if not file_data or len(file_data) == 0:
                logger.error("EA —Ñ–∞–π–ª –ø—É—Å—Ç!")
                return None, None
            return filename, file_data
        else:
            logger.warning("EA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è EA: {e}")
        return None, None

# ===============================
# API –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –õ–ò–¶–ï–ù–ó–ò–ô
# ===============================
app = Flask(__name__)

@app.route('/check_license', methods=['GET', 'POST'])
def check_license():
    """API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        license_key = request.args.get('key') or request.form.get('key')
        account_number = request.args.get('account') or request.form.get('account')
        ip_address = request.remote_addr
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: key={license_key}, account={account_number}, ip={ip_address}")
        
        if not license_key:
            return jsonify({"valid": False, "error": "–ö–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        
        if not account_number:
            return jsonify({"valid": False, "error": "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        if not validate_license_key(license_key):
            log_api_activity(license_key, account_number, "check", "invalid_format", ip_address)
            return jsonify({"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        c.execute('''SELECT user_id, license_status, expires_at, bound_account, license_type 
                    FROM users WHERE license_key = ?''', (license_key,))
        result = c.fetchone()
        
        if not result:
            conn.close()
            log_api_activity(license_key, account_number, "check", "key_not_found", ip_address)
            return jsonify({"valid": False, "error": "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        user_id, status, expires_at, bound_account, license_type = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏
        if status != 'active':
            conn.close()
            log_api_activity(license_key, account_number, "check", "inactive", ip_address)
            return jsonify({"valid": False, "error": "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        if expires_at and check_license_expired(expires_at):
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Å—Ç–µ–∫—à—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
            c.execute('UPDATE users SET license_status = "expired" WHERE user_id = ?', (user_id,))
            conn.commit()
            conn.close()
            log_api_activity(license_key, account_number, "check", "expired", ip_address)
            return jsonify({"valid": False, "error": "–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞"}), 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å—á–µ—Ç—É
        if bound_account is None:
            # –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å—á–µ—Ç—É
            c.execute('UPDATE users SET bound_account = ? WHERE user_id = ?', (account_number, user_id))
            logger.info(f"–ö–ª—é—á {license_key} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—á–µ—Ç—É {account_number}")
        elif bound_account != account_number:
            # –ö–ª—é—á —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Å—á–µ—Ç—É
            conn.close()
            log_api_activity(license_key, account_number, "check", "wrong_account", ip_address)
            return jsonify({"valid": False, "error": f"–ö–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Å—á–µ—Ç—É"}), 403
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        c.execute('''INSERT OR REPLACE INTO license_activity 
                    (license_key, account_number, ip_address, last_check, check_count) 
                    VALUES (?, ?, ?, ?, 
                           COALESCE((SELECT check_count FROM license_activity 
                                   WHERE license_key = ? AND account_number = ?), 0) + 1)''',
                 (license_key, account_number, ip_address, datetime.now().isoformat(),
                  license_key, account_number))
        
        conn.commit()
        conn.close()
        
        log_api_activity(license_key, account_number, "check", "success", ip_address)
        
        return jsonify({
            "valid": True,
            "license_type": license_type,
            "expires_at": expires_at,
            "account_number": account_number,
            "status": "active"
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return jsonify({"valid": False, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

def log_api_activity(license_key, account_number, action, result, ip_address):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ API"""
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        c.execute('''INSERT INTO api_logs 
                    (license_key, account_number, action, result, ip_address) 
                    VALUES (?, ?, ?, ?, ?)''',
                 (license_key, account_number, action, result, ip_address))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

def get_stats():
    try:
        conn = sqlite3.connect('bot_secure.db')
        c = conn.cursor()
        
        c.execute('SELECT COUNT(*) FROM users')
        total_users = c.fetchone()[0]
        
        c.execute('''SELECT COUNT(*) FROM users 
                    WHERE license_status = "active" 
                    AND (expires_at IS NULL OR expires_at > datetime('now'))''')
        active = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_type = "trial"')
        trial = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_type = "monthly"')
        monthly = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM payments WHERE status = "approved"')
        approved_payments = c.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
        c.execute('SELECT COUNT(*) FROM api_logs WHERE action = "check" AND result = "success"')
        successful_checks = c.fetchone()[0]
        
        conn.close()
        return {
            'total': total_users, 
            'active': active, 
            'trial': trial, 
            'monthly': monthly,
            'revenue': approved_payments * MONTHLY_PRICE,
            'api_checks': successful_checks
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'total': 0, 'active': 0, 'trial': 0, 'monthly': 0, 'revenue': 0, 'api_checks': 0}

# ===============================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ===============================
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üÜì 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û + EA —Ñ–∞–π–ª", callback_data="trial")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –º–µ—Å—è—Ü - 100 USD", callback_data="buy")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ EA", callback_data="info")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===============================
# –¢–ï–ö–°–¢–´
# ===============================
EA_INFO = """ü§ñ –¢–û–†–ì–û–í–´–ô –°–û–í–ï–¢–ù–ò–ö
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞

üìä –°–∏–º–≤–æ–ª—ã: BTCUSD, XAUUSD
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–æ–∫
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
üí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: –æ—Ç 1000 USD

üéØ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è + EA —Ñ–∞–π–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üìà –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –¥–µ–º–æ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Å—á–µ—Ç–µ
üí∞ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 100 USD (–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

üîê –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã:
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–∞ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏ –ª–∏—Ü–µ–Ω–∑–∏–π

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""

WELCOME_TEXT = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RFX Trading!

üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
üîê –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

üí° –í–∞—Ä–∏–∞–Ω—Ç—ã:
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ + EA —Ñ–∞–π–ª
üí∞ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 100 USD

üéØ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
1. –ë–µ—Ä–µ—Ç–µ –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è
2. –°–∫–∞—á–∏–≤–∞–µ—Ç–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ EA
3. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
4. –ö–ª—é—á –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ===============================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        register_user(user.id, user.username or "Unknown")
        
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        stats = get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EA —Ñ–∞–π–ª–∞
        filename, file_data = get_ea_file()
        ea_status = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}" if filename else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π: {stats['active']}
üÜì –ü—Ä–æ–±–Ω—ã—Ö: {stats['trial']}
üí∞ –ú–µ—Å—è—á–Ω—ã—Ö: {stats['monthly']}
üíµ –î–æ—Ö–æ–¥: {stats['revenue']} USD

üìÅ EA —Ñ–∞–π–ª: {ea_status}
üîó API –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['api_checks']}
‚ö° –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: {MONTHLY_PRICE} USD
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è

üîê –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´:
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

üí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ EA —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –±–æ—Ç—É"""
        
        await update.message.reply_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats: {e}")

async def upload_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        await update.message.reply_text("""üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ EA —Ñ–∞–π–ª–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .ex5
‚ö†Ô∏è –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º""")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ upload: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
# ===============================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "trial":
            key, error = create_trial_license(user_id)
            if error:
                await query.message.reply_text(f"‚ùå {error}", reply_markup=main_keyboard())
            else:
                text = f"""üéâ –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{key}`
‚è∞ –°—Ä–æ–∫: {TRIAL_DAYS} –¥–Ω—è
üìÅ –ú–æ–∂–µ—Ç–µ –°–†–ê–ó–£ —Å–∫–∞—á–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å EA!

üîê –í–ê–ñ–ù–û:
‚Ä¢ –ö–ª—é—á –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á = –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç
‚Ä¢ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ç –∂–µ –∫–ª—é—á –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è

üéØ –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:
1. –°–∫–∞—á–∞–π—Ç–µ EA —Ñ–∞–π–ª
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ MT4/MT5  
3. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EA
4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ 3 –¥–Ω—è
5. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É

üí∞ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ 100 USD"""
                
                keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="download")]]
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "buy":
            payment_id = create_payment_request(user_id, query.from_user.username or "Unknown")
            if payment_id:
                context.user_data['payment_id'] = payment_id
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_key = get_or_create_user_key(user_id)
                
                text = f"""üí≥ –û–ü–õ–ê–¢–ê –õ–ò–¶–ï–ù–ó–ò–ò

üíµ –°—É–º–º–∞: {MONTHLY_PRICE} USD (1 –º–µ—Å—è—Ü)
üîë –í–∞—à –∫–ª—é—á: `{user_key}`

üí≥ –†–ï–ö–í–ò–ó–ò–¢–´:
üè¶ VISA: `{VISA_CARD}`
üè¶ HUMO: `{HUMO_CARD}`
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {MONTHLY_PRICE} USD –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞

üîê –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ—Ç –∂–µ –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–µ—Å—è—Ü!

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx"""
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                ]
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "paid":
            payment_id = context.user_data.get('payment_id')
            if not payment_id:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=main_keyboard())
                return
                
            await query.message.reply_text(f"""üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ

–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

‚úÖ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ {MONTHLY_PRICE} USD
‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
üîê –í–∞—à –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""")
            
            context.user_data['waiting_receipt'] = True
        
        elif data == "status":
            license_data = get_user_license(user_id)
            
            if not license_data or not license_data[0]:
                text = """‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

–í—ã –º–æ–∂–µ—Ç–µ:
üÜì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è + EA —Ñ–∞–π–ª
üí∞ –ö—É–ø–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD"""
                await query.message.reply_text(text, reply_markup=main_keyboard())
            else:
                key, license_type, status, expires, trial_used, bound_account = license_data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
                if expires and check_license_expired(expires):
                    status = "expired"
                
                status_emoji = "‚úÖ" if status == "active" else "‚ùå"
                type_emoji = "üÜì" if license_type == "trial" else "üí∞"
                
                text = f"""{status_emoji} –°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{key}`
{type_emoji} –¢–∏–ø: {license_type.title()}
üìä –°—Ç–∞—Ç—É—Å: {status.title()}"""
                
                if bound_account:
                    text += f"\nüîê –ü—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—á–µ—Ç—É: {bound_account}"
                else:
                    text += f"\nüîì –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—á–µ—Ç—É (–ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)"
                
                if expires:
                    if status == "active":
                        text += f"\n‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime(expires)}"
                        if license_type == "trial":
                            text += f"\nüéØ –í—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EA!"
                    else:
                        text += f"\n‚ùå –ò—Å—Ç–µ–∫–ª–∞: {format_datetime(expires)}"
                        if license_type == "trial":
                            text += f"\nüí° –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è EA? –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"
                
                text += f"\n\nüîê –ó–ê–©–ò–¢–ê: –ö–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É"
                
                keyboard = []
                if status == "active":
                    download_text = "üìÅ –°–∫–∞—á–∞—Ç—å EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if license_type == "trial" else "üìÅ –°–∫–∞—á–∞—Ç—å EA"
                    keyboard.append([InlineKeyboardButton(download_text, callback_data="download")])
                if license_type == "trial" or status == "expired":
                    keyboard.append([InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")])
                
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "info":
            await query.message.reply_text(EA_INFO, reply_markup=main_keyboard())
        
        elif data == "back":
            await query.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())
        
        elif data == "download":
            license_data = get_user_license(user_id)
            
            if not license_data or not license_data[0]:
                await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏!", reply_markup=main_keyboard())
                return
            
            key, license_type, status, expires, trial_used, bound_account = license_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
            if expires and check_license_expired(expires):
                if license_type == "trial":
                    await query.message.reply_text("""‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!

üéØ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–æ–≤–µ—Ç–Ω–∏–∫? 
üí∞ –ö—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD""", reply_markup=main_keyboard())
                else:
                    await query.message.reply_text("""‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!

üí∞ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD""", reply_markup=main_keyboard())
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
            if status != 'active':
                await query.message.reply_text("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!", reply_markup=main_keyboard())
                return
            
            await query.message.reply_text(f"""üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ EA...

üîë –í–∞—à –∫–ª—é—á: `{key}`
‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞...""", parse_mode='Markdown')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            filename, file_data = get_ea_file()
            
            if not filename or not file_data:
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.message.reply_text("""‚ùå EA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!

üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ê–¥–º–∏–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª
‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx""", reply_markup=main_keyboard())
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                try:
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å EA —Ñ–∞–π–ª!\n–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏: {license_type}"
                    )
                except:
                    pass
                return
            
            try:
                # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                file_obj = BytesIO(file_data)
                file_obj.name = filename
                
                # –†–∞–∑–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π
                if license_type == "trial":
                    caption_text = f"""ü§ñ EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{key}`
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚è∞ –°—Ä–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 3 –¥–Ω—è

üéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ EA –Ω–∞ MT4/MT5
2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö EA –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á: {key}
3. EA –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Å—á–µ—Ç—É
4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ 3 –¥–Ω—è

üîê –í–ê–ñ–ù–û: –ö–ª—é—á –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É!

üí∞ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD!

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""
                else:
                    caption_text = f"""ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!

üîë –í–∞—à –ü–û–°–¢–û–Ø–ù–ù–´–ô –∫–ª—é—á: `{key}`
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è VPS

üéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ EA –Ω–∞ MT4/MT5
2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö EA –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á: {key}
3. EA —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Å—è—Ü –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏

üîê –ó–ê–©–ò–¢–ê: –ö–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""
                
                await query.message.reply_document(
                    document=file_obj,
                    filename=filename,
                    caption=caption_text,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—Ç–∏–ø: {license_type})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await query.message.reply_text("""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å Telegram
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
        
        elif data.startswith("approve_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            result = approve_payment(payment_id)
            
            if result:
                license_key, target_user_id, expires = result
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")]]
                    
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"""üéâ –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!

‚úÖ –ú–µ—Å—è—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üîë –í–∞—à –∫–ª—é—á: `{license_key}`
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime(expires)}

üîê –ö–ª—é—á –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ - –æ–Ω –ü–û–°–¢–û–Ø–ù–ù–´–ô!
üìÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å EA!""",
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                
                await query.message.edit_text(f"""‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω!

üîë –ö–ª—é—á: `{license_key}`
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω
‚è∞ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–æ: {format_datetime(expires)}
üîê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–¥–ª–µ–Ω""", parse_mode='Markdown')
        
        elif data.startswith("reject_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            await query.message.edit_text("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û
# ===============================
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.user_data.get('waiting_receipt'):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        payment_id = context.user_data.get('payment_id')
        
        if not payment_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫
        if save_receipt(payment_id, file_id):
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_key = get_or_create_user_key(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{payment_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
                ]]
                
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=file_id,
                    caption=f"""üí≥ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ü–õ–ê–¢–£

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})
üîë –ö–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_key}
üíµ –°—É–º–º–∞: {MONTHLY_PRICE} USD (1 –º–µ—Å—è—Ü)
üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{payment_id}

üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
VISA: {VISA_CARD}
HUMO: {HUMO_CARD}
–í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}

üîê –í–ê–ñ–ù–û: –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–æ—Ç –∂–µ –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω!""",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                await update.message.reply_text("""‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
üîê –í–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω
üìû –í–æ–ø—Ä–æ—Å—ã: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
                
                context.user_data.pop('waiting_receipt', None)
                context.user_data.pop('payment_id', None)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ photo_handler: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í
# ===============================
async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        document = update.message.document
        
        if not document.file_name.lower().endswith('.ex5'):
            await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .ex5!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return
        
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        
        try:
            file = await document.get_file()
            file_data = await file.download_as_bytearray()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
            if not file_data:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª!")
                return
            
            if save_ea_file(file_data, document.file_name):
                await update.message.reply_text(f"""‚úÖ EA —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–¥–∞—á–µ!

üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}
üìä –†–∞–∑–º–µ—Ä: {len(file_data):,} –±–∞–π—Ç
üîÑ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω

üéØ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª!
üîê –§–∞–π–ª –∑–∞—â–∏—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: /stats""")
                
                logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {document.file_name}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ document_handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
# ===============================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

# ===============================
# –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê
# ===============================
def run_api():
    """–ó–∞–ø—É—Å–∫ Flask API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=API_PORT, debug=False)

# ===============================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ===============================
def main():
    if not TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return
    
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    api_thread = Thread(target=run_api, daemon=True)
    api_thread.start()
    print(f"üîó API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {API_PORT}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_bot = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app_bot.add_handler(CommandHandler("start", start_command))
    app_bot.add_handler(CommandHandler("stats", stats_command))
    app_bot.add_handler(CommandHandler("upload", upload_command))
    app_bot.add_handler(CallbackQueryHandler(button_handler))
    app_bot.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app_bot.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app_bot.add_error_handler(error_handler)
    
    print("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 60)
    print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è")
    print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: {MONTHLY_PRICE} USD")
    print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print(f"üîó API –ø–æ—Ä—Ç: {API_PORT}")
    print("=" * 60)
    print("üîê –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´:")
    print("‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–µ–π –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Å—á–µ—Ç–∞–º")
    print("‚Ä¢ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π")
    print("‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏")
    print("=" * 60)
    print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    print("/upload - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ EA (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    print("=" * 60)
    print("üîó API ENDPOINTS:")
    print(f"GET /check_license?key=XXX&account=YYY - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏")
    print(f"GET /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API")
    print("=" * 60)
    print("‚ö° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        app_bot.run_polling(
            drop_pending_updates=True,
            pool_timeout=60,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")

if __name__ == '__main__':
    main()
