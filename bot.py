#!/usr/bin/env python3
import os
import sqlite3
import secrets
import string
import logging
from datetime import datetime, timedelta
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot")
    print("pip install python-telegram-bot")
    exit(1)

# ===============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===============================
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 295698267
MONTHLY_PRICE = 100  # 100$ –∑–∞ –º–µ—Å—è—Ü
TRIAL_DAYS = 3       # 3 –¥–Ω—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥

# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
VISA_CARD = "4278 3100 2430 7167"
HUMO_CARD = "9860 1001 2541 9018"
CARD_OWNER = "Asqarov Rasulbek"

print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
print(f"üë®‚Äçüíº Admin ID: {ADMIN_ID}")
print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: {MONTHLY_PRICE} USD")
print(f"üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è")
print(f"üí≥ VISA: {VISA_CARD}")
print(f"üí≥ HUMO: {HUMO_CARD}")

# ===============================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ===============================
def init_db():
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            license_key TEXT,
            license_type TEXT DEFAULT 'none',
            license_status TEXT DEFAULT 'inactive',
            expires_at TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            trial_used INTEGER DEFAULT 0
        )''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É trial_used –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            c.execute('ALTER TABLE users ADD COLUMN trial_used INTEGER DEFAULT 0')
        except sqlite3.OperationalError:
            pass
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount INTEGER DEFAULT 100,
            status TEXT DEFAULT 'pending',
            receipt_file_id TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ EA —Ñ–∞–π–ª–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS ea_files (
            id INTEGER PRIMARY KEY,
            filename TEXT,
            file_data BLOB
        )''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")

# ===============================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ===============================
def generate_key():
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(16))

def is_admin(user_id):
    return int(user_id) == ADMIN_ID

def check_license_expired(expires_at):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è"""
    if not expires_at:
        return False
    try:
        return datetime.now() > datetime.fromisoformat(expires_at)
    except:
        return True

def format_datetime(dt_string):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt = datetime.fromisoformat(dt_string)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# ===============================
# –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ===============================
def register_user(user_id, username):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def get_user_license(user_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('SELECT license_key, license_type, license_status, expires_at, trial_used FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        conn.close()
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None

def create_trial_license(user_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        c.execute('SELECT trial_used FROM users WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        
        if result and result[0] == 1:
            conn.close()
            return None, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è
        key = generate_key()
        expires = (datetime.now() + timedelta(days=TRIAL_DAYS)).isoformat()
        
        c.execute('''UPDATE users SET 
            license_key = ?, license_type = 'trial', license_status = 'active', 
            expires_at = ?, trial_used = 1
            WHERE user_id = ?''', (key, expires, user_id))
        
        conn.commit()
        conn.close()
        return key, None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"

def create_monthly_license(user_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        key = generate_key()
        expires = (datetime.now() + timedelta(days=30)).isoformat()
        
        c.execute('''UPDATE users SET 
            license_key = ?, license_type = 'monthly', license_status = 'active', expires_at = ?
            WHERE user_id = ?''', (key, expires, user_id))
        
        conn.commit()
        conn.close()
        return key, expires
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return None, None

def create_payment_request(user_id, username):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('INSERT INTO payments (user_id, username, amount) VALUES (?, ?, ?)', 
                 (user_id, username, MONTHLY_PRICE))
        payment_id = c.lastrowid
        conn.commit()
        conn.close()
        return payment_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return None

def save_receipt(payment_id, file_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('UPDATE payments SET receipt_file_id = ? WHERE id = ?', (file_id, payment_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        return False

def approve_payment(payment_id):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        c.execute('SELECT user_id FROM payments WHERE id = ?', (payment_id,))
        result = c.fetchone()
        if not result:
            conn.close()
            return None
        
        user_id = result[0]
        license_key, expires = create_monthly_license(user_id)
        
        if license_key:
            c.execute('UPDATE payments SET status = "approved" WHERE id = ?', (payment_id,))
            conn.commit()
        
        conn.close()
        return license_key, user_id, expires
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        return None

def save_ea_file(file_data, filename):
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('DELETE FROM ea_files')  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        c.execute('INSERT INTO ea_files (filename, file_data) VALUES (?, ?)', (filename, file_data))
        conn.commit()
        conn.close()
        logger.info(f"EA —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è EA: {e}")
        return False

def get_ea_file():
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        c.execute('SELECT filename, file_data FROM ea_files LIMIT 1')
        result = c.fetchone()
        conn.close()
        
        if result:
            filename, file_data = result
            logger.info(f"EA —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {filename}, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if not file_data or len(file_data) == 0:
                logger.error("EA —Ñ–∞–π–ª –ø—É—Å—Ç!")
                return None, None
                
            return filename, file_data
        else:
            logger.warning("EA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None, None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è EA: {e}")
        return None, None

def get_stats():
    try:
        conn = sqlite3.connect('bot_simple.db')
        c = conn.cursor()
        
        c.execute('SELECT COUNT(*) FROM users')
        total_users = c.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ)
        c.execute('''SELECT COUNT(*) FROM users 
                    WHERE license_status = "active" 
                    AND (expires_at IS NULL OR expires_at > datetime('now'))''')
        active = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_type = "trial"')
        trial = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM users WHERE license_type = "monthly"')
        monthly = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM payments WHERE status = "approved"')
        approved_payments = c.fetchone()[0]
        
        conn.close()
        return {
            'total': total_users, 
            'active': active, 
            'trial': trial, 
            'monthly': monthly,
            'revenue': approved_payments * MONTHLY_PRICE
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'total': 0, 'active': 0, 'trial': 0, 'monthly': 0, 'revenue': 0}

# ===============================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ===============================
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üÜì 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û + EA —Ñ–∞–π–ª", callback_data="trial")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –º–µ—Å—è—Ü - 100 USD", callback_data="buy")],
        [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ EA", callback_data="info")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===============================
# –¢–ï–ö–°–¢–´
# ===============================
EA_INFO = """ü§ñ –¢–û–†–ì–û–í–´–ô –°–û–í–ï–¢–ù–ò–ö
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞

üìä –°–∏–º–≤–æ–ª—ã: BTCUSD, XAUUSD
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∞–¥–æ–∫
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
üí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: –æ—Ç 1000 USD

üéØ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 3 –¥–Ω—è + EA —Ñ–∞–π–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üìà –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –¥–µ–º–æ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Å—á–µ—Ç–µ
üí∞ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 100 USD (–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ EA —Ñ–∞–π–ª—É
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ —Ä–∏—Å–∫–∞

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""

WELCOME_TEXT = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RFX Trading!

üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚ö° VPS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

üí° –í–∞—Ä–∏–∞–Ω—Ç—ã:
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ + —Ñ–∞–π–ª EA
üí∞ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 100 USD

üéØ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
1. –ë–µ—Ä–µ—Ç–µ –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è
2. –°–∫–∞—á–∏–≤–∞–µ—Ç–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ EA
3. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ===============================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        register_user(user.id, user.username or "Unknown")
        
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        stats = get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EA —Ñ–∞–π–ª–∞
        filename, file_data = get_ea_file()
        ea_status = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}" if filename else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π: {stats['active']}
üÜì –ü—Ä–æ–±–Ω—ã—Ö: {stats['trial']}
üí∞ –ú–µ—Å—è—á–Ω—ã—Ö: {stats['monthly']}
üíµ –î–æ—Ö–æ–¥: {stats['revenue']} USD

üìÅ EA —Ñ–∞–π–ª: {ea_status}
‚ö° –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: {MONTHLY_PRICE} USD
üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è

üí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ EA —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –±–æ—Ç—É"""
        
        await update.message.reply_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats: {e}")

async def upload_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        await update.message.reply_text("""üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ EA —Ñ–∞–π–ª–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .ex5
‚ö†Ô∏è –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º""")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ upload: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
# ===============================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "trial":
            key, error = create_trial_license(user_id)
            if error:
                await query.message.reply_text(f"‚ùå {error}", reply_markup=main_keyboard())
            else:
                text = f"""üéâ –ü—Ä–æ–±–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üîë –í–∞—à –∫–ª—é—á: `{key}`
‚è∞ –°—Ä–æ–∫: {TRIAL_DAYS} –¥–Ω—è
üìÅ –ú–æ–∂–µ—Ç–µ –°–†–ê–ó–£ —Å–∫–∞—á–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å EA!

üéØ –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:
1. –°–∫–∞—á–∞–π—Ç–µ EA —Ñ–∞–π–ª
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ MT4/MT5  
3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ 3 –¥–Ω—è
4. –ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è - –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É

üí∞ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ 100 USD"""
                
                keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="download")]]
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "buy":
            payment_id = create_payment_request(user_id, query.from_user.username or "Unknown")
            if payment_id:
                context.user_data['payment_id'] = payment_id
                
                text = f"""üí≥ –û–ü–õ–ê–¢–ê –õ–ò–¶–ï–ù–ó–ò–ò

üíµ –°—É–º–º–∞: {MONTHLY_PRICE} USD (1 –º–µ—Å—è—Ü)

üí≥ –†–ï–ö–í–ò–ó–ò–¢–´:
üè¶ VISA: `{VISA_CARD}`
üè¶ HUMO: `{HUMO_CARD}`
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {MONTHLY_PRICE} USD –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx"""
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
                ]
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "paid":
            payment_id = context.user_data.get('payment_id')
            if not payment_id:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=main_keyboard())
                return
                
            await query.message.reply_text(f"""üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ

–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

‚úÖ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ {MONTHLY_PRICE} USD
‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ""")
            
            context.user_data['waiting_receipt'] = True
        
        elif data == "status":
            license_data = get_user_license(user_id)
            
            if not license_data or not license_data[0]:
                text = """‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

–í—ã –º–æ–∂–µ—Ç–µ:
üÜì –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è + EA —Ñ–∞–π–ª
üí∞ –ö—É–ø–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD"""
                await query.message.reply_text(text, reply_markup=main_keyboard())
            else:
                key, license_type, status, expires, trial_used = license_data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
                if expires and check_license_expired(expires):
                    status = "expired"
                
                status_emoji = "‚úÖ" if status == "active" else "‚ùå"
                type_emoji = "üÜì" if license_type == "trial" else "üí∞"
                
                text = f"""{status_emoji} –°—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏

üîë –ö–ª—é—á: `{key}`
{type_emoji} –¢–∏–ø: {license_type.title()}
üìä –°—Ç–∞—Ç—É—Å: {status.title()}"""
                
                if expires:
                    if status == "active":
                        text += f"\n‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime(expires)}"
                        if license_type == "trial":
                            text += f"\nüéØ –í—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EA!"
                    else:
                        text += f"\n‚ùå –ò—Å—Ç–µ–∫–ª–∞: {format_datetime(expires)}"
                        if license_type == "trial":
                            text += f"\nüí° –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è EA? –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"
                
                keyboard = []
                if status == "active":
                    download_text = "üìÅ –°–∫–∞—á–∞—Ç—å EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if license_type == "trial" else "üìÅ –°–∫–∞—á–∞—Ç—å EA"
                    keyboard.append([InlineKeyboardButton(download_text, callback_data="download")])
                if license_type == "trial" or status == "expired":
                    keyboard.append([InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")])
                
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        elif data == "info":
            await query.message.reply_text(EA_INFO, reply_markup=main_keyboard())
        
        elif data == "back":
            await query.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())
        
        elif data == "download":
            license_data = get_user_license(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –≤–æ–æ–±—â–µ
            if not license_data or not license_data[0]:
                await query.message.reply_text("""‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏!

üÜì –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 3 –¥–Ω—è
üí∞ –ò–ª–∏ –∫—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É""", reply_markup=main_keyboard())
                return
            
            key, license_type, status, expires, trial_used = license_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
            if expires and check_license_expired(expires):
                if license_type == "trial":
                    await query.message.reply_text("""‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!

üéØ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–æ–≤–µ—Ç–Ω–∏–∫? 
üí∞ –ö—É–ø–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD""", reply_markup=main_keyboard())
                else:
                    await query.message.reply_text("""‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!

üí∞ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD""", reply_markup=main_keyboard())
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è
            if status != 'active':
                await query.message.reply_text("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!", reply_markup=main_keyboard())
                return
            
            key = license_data[0]
            license_type = license_data[1]  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            
            await query.message.reply_text(f"""üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ EA...

üîë –í–∞—à –∫–ª—é—á: `{key}`
‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞...""", parse_mode='Markdown')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            filename, file_data = get_ea_file()
            
            if not filename or not file_data:
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await query.message.reply_text("""‚ùå EA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!

üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ê–¥–º–∏–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª
‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx""", reply_markup=main_keyboard())
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                try:
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞—á–∞—Ç—å EA —Ñ–∞–π–ª!\n–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏: {license_type}"
                    )
                except:
                    pass
                return
            
            try:
                # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                file_obj = BytesIO(file_data)
                file_obj.name = filename
                
                # –†–∞–∑–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π
                if license_type == "trial":
                    caption_text = f"""ü§ñ EA –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω!

üîë –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á: `{key}`
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚è∞ –°—Ä–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 3 –¥–Ω—è

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ –¥–µ–º–æ —Å—á–µ—Ç
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ BTCUSD, XAUUSD
‚Ä¢ –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 3 –¥–Ω—è

üí∞ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 100 USD!

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""
                else:
                    caption_text = f"""ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!

üîë –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: `{key}`
üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–≥–¥–∞–Ω–æ–≤–∞
‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è VPS

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rasul_asqarov_rfx
üë• –ì—Ä—É–ø–ø–∞: t.me/RFx_Group"""
                
                await query.message.reply_document(
                    document=file_obj,
                    filename=filename,
                    caption=caption_text,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (—Ç–∏–ø: {license_type})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await query.message.reply_text("""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å Telegram
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
        
        elif data.startswith("approve_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            result = approve_payment(payment_id)
            
            if result:
                license_key, target_user_id, expires = result
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å EA", callback_data="download")]]
                    
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"""üéâ –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!

‚úÖ –ú–µ—Å—è—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üîë –ö–ª—é—á: `{license_key}`
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime(expires)}

üìÅ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å EA!""",
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                
                await query.message.edit_text(f"""‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω!

üîë –ö–ª—é—á: `{license_key}`
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω
‚è∞ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–æ: {format_datetime(expires)}""", parse_mode='Markdown')
        
        elif data.startswith("reject_"):
            if not is_admin(user_id):
                return
            
            payment_id = int(data.split("_")[1])
            await query.message.edit_text("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û
# ===============================
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.user_data.get('waiting_receipt'):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        payment_id = context.user_data.get('payment_id')
        
        if not payment_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫
        if save_receipt(payment_id, file_id):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{payment_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
                ]]
                
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=file_id,
                    caption=f"""üí≥ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ü–õ–ê–¢–£

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})
üíµ –°—É–º–º–∞: {MONTHLY_PRICE} USD (1 –º–µ—Å—è—Ü)
üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{payment_id}

üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
VISA: {VISA_CARD}
HUMO: {HUMO_CARD}
–í–ª–∞–¥–µ–ª–µ—Ü: {CARD_OWNER}""",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                await update.message.reply_text("""‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
üìû –í–æ–ø—Ä–æ—Å—ã: @rasul_asqarov_rfx""", reply_markup=main_keyboard())
                
                context.user_data.pop('waiting_receipt', None)
                context.user_data.pop('payment_id', None)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @rasul_asqarov_rfx")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ photo_handler: {e}")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í
# ===============================
async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        document = update.message.document
        
        if not document.file_name.lower().endswith('.ex5'):
            await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .ex5!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return
        
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        
        try:
            file = await document.get_file()
            file_data = await file.download_as_bytearray()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
            if not file_data:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª!")
                return
            
            if save_ea_file(file_data, document.file_name):
                await update.message.reply_text(f"""‚úÖ EA —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–¥–∞—á–µ!

üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {document.file_name}
üìä –†–∞–∑–º–µ—Ä: {len(file_data):,} –±–∞–π—Ç
üîÑ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω

üéØ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: /stats""")
                
                logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {document.file_name}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ document_handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!")

# ===============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
# ===============================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

# ===============================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ===============================
def main():
    if not TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return
    
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("upload", upload_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 50)
    print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_DAYS} –¥–Ω—è")
    print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: {MONTHLY_PRICE} USD")
    print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print("=" * 50)
    print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    print("/upload - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ EA (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
    print("=" * 50)
    print("üìÅ –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ EA —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .ex5 —Ñ–∞–π–ª –±–æ—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞")
    print("‚ö° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        app.run_polling(
            drop_pending_updates=True,
            pool_timeout=60,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!")

if __name__ == '__main__':
    main()
